{
    "sourceFile": "tests/experiments/test_reminders_models.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1724539735741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724540059797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,130 @@\n+import pytest\n+from unittest.mock import patch\n+from src.dspygen.experiments.reminders_models import RemindersAppState, RemindersAccount, ReminderList, Reminder, AccountType\n+from uuid import UUID\n \n+@pytest.fixture\n+def mock_applescript_output():\n+    return '''\n+    {{\"12345678-1234-5678-1234-567812345678\", \"iCloud\"}, {\"87654321-4321-8765-4321-876543210987\", \"Local\"}}\n+    '''\n \n+@pytest.fixture\n+def mock_lists_output():\n+    return '''\n+    {{\"11111111-1111-1111-1111-111111111111\", \"Work\"}, {\"22222222-2222-2222-2222-222222222222\", \"Personal\"}}\n+    '''\n \n+@pytest.fixture\n+def mock_reminders_output():\n+    return '''\n+    {{\"aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\", \"Buy groceries\", \"Milk and eggs\", \"2023-05-01\"}, \n+    {\"bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb\", \"Call mom\", \"missing value\", \"missing value\"}}\n+    '''\n+\n+@patch.object(RemindersAppState, '_run_applescript')\n+def test_from_system(mock_run_applescript, mock_applescript_output, mock_lists_output, mock_reminders_output):\n+    mock_run_applescript.side_effect = [\n+        mock_applescript_output,\n+        mock_lists_output,\n+        mock_reminders_output,\n+        mock_reminders_output\n+    ]\n+\n+    app_state = RemindersAppState.from_system()\n+\n+    assert len(app_state.accounts) == 2\n+    assert app_state.accounts[0].id == UUID('12345678-1234-5678-1234-567812345678')\n+    assert app_state.accounts[0].name == 'iCloud'\n+    assert app_state.accounts[0].type == AccountType.OTHER\n+    assert len(app_state.accounts[0].lists) == 2\n+\n+    work_list = app_state.accounts[0].lists[0]\n+    assert work_list.id == UUID('11111111-1111-1111-1111-111111111111')\n+    assert work_list.name == 'Work'\n+    assert len(work_list.reminders) == 2\n+\n+    grocery_reminder = work_list.reminders[0]\n+    assert grocery_reminder.id == UUID('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa')\n+    assert grocery_reminder.title == 'Buy groceries'\n+    assert grocery_reminder.notes == 'Milk and eggs'\n+    assert str(grocery_reminder.due_date) == '2023-05-01'\n+\n+    call_mom_reminder = work_list.reminders[1]\n+    assert call_mom_reminder.id == UUID('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb')\n+    assert call_mom_reminder.title == 'Call mom'\n+    assert call_mom_reminder.notes is None\n+    assert call_mom_reminder.due_date is None\n+\n+def test_get_all_reminders():\n+    account1 = RemindersAccount(id=UUID('12345678-1234-5678-1234-567812345678'), name='iCloud', type=AccountType.ICLOUD)\n+    account2 = RemindersAccount(id=UUID('87654321-4321-8765-4321-876543210987'), name='Local', type=AccountType.LOCAL)\n+\n+    list1 = ReminderList(id=UUID('11111111-1111-1111-1111-111111111111'), name='Work')\n+    list2 = ReminderList(id=UUID('22222222-2222-2222-2222-222222222222'), name='Personal')\n+\n+    reminder1 = Reminder(id=UUID('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'), title='Task 1')\n+    reminder2 = Reminder(id=UUID('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb'), title='Task 2')\n+    reminder3 = Reminder(id=UUID('cccccccc-cccc-cccc-cccc-cccccccccccc'), title='Task 3')\n+\n+    list1.reminders = [reminder1, reminder2]\n+    list2.reminders = [reminder3]\n+\n+    account1.lists = [list1]\n+    account2.lists = [list2]\n+\n+    app_state = RemindersAppState(accounts=[account1, account2])\n+\n+    all_reminders = app_state.get_all_reminders()\n+    assert len(all_reminders) == 3\n+    assert all(isinstance(reminder, Reminder) for reminder in all_reminders)\n+    assert set(reminder.title for reminder in all_reminders) == {'Task 1', 'Task 2', 'Task 3'}\n+\n+def test_get_reminders_by_list():\n+    account = RemindersAccount(id=UUID('12345678-1234-5678-1234-567812345678'), name='iCloud', type=AccountType.ICLOUD)\n+    list1 = ReminderList(id=UUID('11111111-1111-1111-1111-111111111111'), name='Work')\n+    list2 = ReminderList(id=UUID('22222222-2222-2222-2222-222222222222'), name='Personal')\n+\n+    reminder1 = Reminder(id=UUID('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'), title='Work Task')\n+    reminder2 = Reminder(id=UUID('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb'), title='Personal Task')\n+\n+    list1.reminders = [reminder1]\n+    list2.reminders = [reminder2]\n+    account.lists = [list1, list2]\n+\n+    app_state = RemindersAppState(accounts=[account])\n+\n+    work_reminders = app_state.get_reminders_by_list(UUID('11111111-1111-1111-1111-111111111111'))\n+    assert len(work_reminders) == 1\n+    assert work_reminders[0].title == 'Work Task'\n+\n+    personal_reminders = app_state.get_reminders_by_list(UUID('22222222-2222-2222-2222-222222222222'))\n+    assert len(personal_reminders) == 1\n+    assert personal_reminders[0].title == 'Personal Task'\n+\n+def test_get_reminders_by_account():\n+    account1 = RemindersAccount(id=UUID('12345678-1234-5678-1234-567812345678'), name='iCloud', type=AccountType.ICLOUD)\n+    account2 = RemindersAccount(id=UUID('87654321-4321-8765-4321-876543210987'), name='Local', type=AccountType.LOCAL)\n+\n+    list1 = ReminderList(id=UUID('11111111-1111-1111-1111-111111111111'), name='Work')\n+    list2 = ReminderList(id=UUID('22222222-2222-2222-2222-222222222222'), name='Personal')\n+\n+    reminder1 = Reminder(id=UUID('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'), title='iCloud Task 1')\n+    reminder2 = Reminder(id=UUID('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb'), title='iCloud Task 2')\n+    reminder3 = Reminder(id=UUID('cccccccc-cccc-cccc-cccc-cccccccccccc'), title='Local Task')\n+\n+    list1.reminders = [reminder1, reminder2]\n+    list2.reminders = [reminder3]\n+\n+    account1.lists = [list1]\n+    account2.lists = [list2]\n+\n+    app_state = RemindersAppState(accounts=[account1, account2])\n+\n+    icloud_reminders = app_state.get_reminders_by_account(UUID('12345678-1234-5678-1234-567812345678'))\n+    assert len(icloud_reminders) == 2\n+    assert set(reminder.title for reminder in icloud_reminders) == {'iCloud Task 1', 'iCloud Task 2'}\n+\n+    local_reminders = app_state.get_reminders_by_account(UUID('87654321-4321-8765-4321-876543210987'))\n+    assert len(local_reminders) == 1\n+    assert local_reminders[0].title == 'Local Task'\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724540135328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import pytest\n from unittest.mock import patch\n from src.dspygen.experiments.reminders_models import RemindersAppState, RemindersAccount, ReminderList, Reminder, AccountType\n from uuid import UUID\n+import ast\n \n @pytest.fixture\n def mock_applescript_output():\n     return '''\n"
                },
                {
                    "date": 1724540145035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import pytest\n from unittest.mock import patch\n from src.dspygen.experiments.reminders_models import RemindersAppState, RemindersAccount, ReminderList, Reminder, AccountType\n from uuid import UUID\n-import ast\n \n @pytest.fixture\n def mock_applescript_output():\n     return '''\n"
                },
                {
                    "date": 1724540150242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import pytest\n from unittest.mock import patch\n from src.dspygen.experiments.reminders_models import RemindersAppState, RemindersAccount, ReminderList, Reminder, AccountType\n from uuid import UUID\n+import ast\n \n @pytest.fixture\n def mock_applescript_output():\n     return '''\n"
                },
                {
                    "date": 1724542780502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,131 +1,122 @@\n import pytest\n-from unittest.mock import patch\n+from unittest.mock import patch, Mock\n+from faker import Faker\n from src.dspygen.experiments.reminders_models import RemindersAppState, RemindersAccount, ReminderList, Reminder, AccountType\n from uuid import UUID\n-import ast\n+import json\n \n @pytest.fixture\n-def mock_applescript_output():\n-    return '''\n-    {{\"12345678-1234-5678-1234-567812345678\", \"iCloud\"}, {\"87654321-4321-8765-4321-876543210987\", \"Local\"}}\n-    '''\n+def fake():\n+    return Faker()\n \n @pytest.fixture\n-def mock_lists_output():\n-    return '''\n-    {{\"11111111-1111-1111-1111-111111111111\", \"Work\"}, {\"22222222-2222-2222-2222-222222222222\", \"Personal\"}}\n-    '''\n+def mock_applescript_output(fake):\n+    def _generate_output(data_type):\n+        if data_type == 'accounts':\n+            return json.dumps([\n+                {\"id\": fake.uuid4(), \"name\": fake.company()}\n+                for _ in range(2)\n+            ])\n+        elif data_type == 'lists':\n+            return json.dumps([\n+                {\"id\": fake.uuid4(), \"name\": fake.word()}\n+                for _ in range(2)\n+            ])\n+        elif data_type == 'reminders':\n+            return json.dumps([\n+                {\n+                    \"id\": fake.uuid4(),\n+                    \"title\": fake.sentence(nb_words=3),\n+                    \"notes\": fake.paragraph(nb_sentences=1),\n+                    \"due_date\": fake.date(pattern=\"%Y-%m-%d\")\n+                },\n+                {\n+                    \"id\": fake.uuid4(),\n+                    \"title\": fake.sentence(nb_words=3),\n+                    \"notes\": \"missing value\",\n+                    \"due_date\": \"missing value\"\n+                }\n+            ])\n+    return _generate_output\n \n @pytest.fixture\n-def mock_reminders_output():\n-    return '''\n-    {{\"aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\", \"Buy groceries\", \"Milk and eggs\", \"2023-05-01\"}, \n-    {\"bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb\", \"Call mom\", \"missing value\", \"missing value\"}}\n-    '''\n+def mock_reminders_app_state(mock_applescript_output):\n+    with patch.object(RemindersAppState, '_run_applescript') as mock_run:\n+        mock_run.side_effect = [\n+            mock_applescript_output('accounts'),\n+            mock_applescript_output('lists'),\n+            mock_applescript_output('reminders'),\n+            mock_applescript_output('reminders')\n+        ]\n+        yield RemindersAppState.from_system()\n \n-@patch.object(RemindersAppState, '_run_applescript')\n-def test_from_system(mock_run_applescript, mock_applescript_output, mock_lists_output, mock_reminders_output):\n-    mock_run_applescript.side_effect = [\n-        mock_applescript_output,\n-        mock_lists_output,\n-        mock_reminders_output,\n-        mock_reminders_output\n-    ]\n+def test_from_system(mock_reminders_app_state):\n+    app_state = mock_reminders_app_state\n \n-    app_state = RemindersAppState.from_system()\n-\n     assert len(app_state.accounts) == 2\n-    assert app_state.accounts[0].id == UUID('12345678-1234-5678-1234-567812345678')\n-    assert app_state.accounts[0].name == 'iCloud'\n-    assert app_state.accounts[0].type == AccountType.OTHER\n-    assert len(app_state.accounts[0].lists) == 2\n+    assert all(isinstance(account, RemindersAccount) for account in app_state.accounts)\n+    assert all(isinstance(account.id, UUID) for account in app_state.accounts)\n+    assert all(isinstance(account.name, str) for account in app_state.accounts)\n+    assert all(account.type == AccountType.OTHER for account in app_state.accounts)\n+    assert all(len(account.lists) == 2 for account in app_state.accounts)\n \n-    work_list = app_state.accounts[0].lists[0]\n-    assert work_list.id == UUID('11111111-1111-1111-1111-111111111111')\n-    assert work_list.name == 'Work'\n-    assert len(work_list.reminders) == 2\n+    for account in app_state.accounts:\n+        for reminder_list in account.lists:\n+            assert isinstance(reminder_list, ReminderList)\n+            assert isinstance(reminder_list.id, UUID)\n+            assert isinstance(reminder_list.name, str)\n+            assert len(reminder_list.reminders) == 2\n \n-    grocery_reminder = work_list.reminders[0]\n-    assert grocery_reminder.id == UUID('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa')\n-    assert grocery_reminder.title == 'Buy groceries'\n-    assert grocery_reminder.notes == 'Milk and eggs'\n-    assert str(grocery_reminder.due_date) == '2023-05-01'\n+            for reminder in reminder_list.reminders:\n+                assert isinstance(reminder, Reminder)\n+                assert isinstance(reminder.id, UUID)\n+                assert isinstance(reminder.title, str)\n+                assert isinstance(reminder.notes, (str, type(None)))\n+                assert isinstance(reminder.due_date, (str, type(None)))\n \n-    call_mom_reminder = work_list.reminders[1]\n-    assert call_mom_reminder.id == UUID('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb')\n-    assert call_mom_reminder.title == 'Call mom'\n-    assert call_mom_reminder.notes is None\n-    assert call_mom_reminder.due_date is None\n+def test_get_all_reminders(fake):\n+    app_state = create_mock_app_state(fake)\n+    all_reminders = app_state.get_all_reminders()\n \n-def test_get_all_reminders():\n-    account1 = RemindersAccount(id=UUID('12345678-1234-5678-1234-567812345678'), name='iCloud', type=AccountType.ICLOUD)\n-    account2 = RemindersAccount(id=UUID('87654321-4321-8765-4321-876543210987'), name='Local', type=AccountType.LOCAL)\n-\n-    list1 = ReminderList(id=UUID('11111111-1111-1111-1111-111111111111'), name='Work')\n-    list2 = ReminderList(id=UUID('22222222-2222-2222-2222-222222222222'), name='Personal')\n-\n-    reminder1 = Reminder(id=UUID('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'), title='Task 1')\n\\ No newline at end of file\n-    reminder2 = Reminder(id=UUID('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb'), title='Task 2')\n-    reminder3 = Reminder(id=UUID('cccccccc-cccc-cccc-cccc-cccccccccccc'), title='Task 3')\n-\n-    list1.reminders = [reminder1, reminder2]\n-    list2.reminders = [reminder3]\n-\n-    account1.lists = [list1]\n-    account2.lists = [list2]\n-\n-    app_state = RemindersAppState(accounts=[account1, account2])\n-\n-    all_reminders = app_state.get_all_reminders()\n     assert len(all_reminders) == 3\n     assert all(isinstance(reminder, Reminder) for reminder in all_reminders)\n-    assert set(reminder.title for reminder in all_reminders) == {'Task 1', 'Task 2', 'Task 3'}\n+    assert len(set(reminder.title for reminder in all_reminders)) == 3\n \n-def test_get_reminders_by_list():\n-    account = RemindersAccount(id=UUID('12345678-1234-5678-1234-567812345678'), name='iCloud', type=AccountType.ICLOUD)\n-    list1 = ReminderList(id=UUID('11111111-1111-1111-1111-111111111111'), name='Work')\n-    list2 = ReminderList(id=UUID('22222222-2222-2222-2222-222222222222'), name='Personal')\n+def test_get_reminders_by_list(fake):\n+    app_state = create_mock_app_state(fake)\n+    list_id = app_state.accounts[0].lists[0].id\n \n-    reminder1 = Reminder(id=UUID('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'), title='Work Task')\n-    reminder2 = Reminder(id=UUID('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb'), title='Personal Task')\n+    reminders = app_state.get_reminders_by_list(list_id)\n+    assert len(reminders) == 2\n+    assert all(isinstance(reminder, Reminder) for reminder in reminders)\n+    assert reminders[0].title == app_state.accounts[0].lists[0].reminders[0].title\n \n-    list1.reminders = [reminder1]\n-    list2.reminders = [reminder2]\n-    account.lists = [list1, list2]\n+def test_get_reminders_by_account(fake):\n+    app_state = create_mock_app_state(fake)\n+    account_id = app_state.accounts[0].id\n \n-    app_state = RemindersAppState(accounts=[account])\n+    reminders = app_state.get_reminders_by_account(account_id)\n+    assert len(reminders) == 2\n+    assert all(isinstance(reminder, Reminder) for reminder in reminders)\n+    assert set(r.title for r in reminders) == set(r.title for r in app_state.accounts[0].lists[0].reminders)\n \n-    work_reminders = app_state.get_reminders_by_list(UUID('11111111-1111-1111-1111-111111111111'))\n-    assert len(work_reminders) == 1\n-    assert work_reminders[0].title == 'Work Task'\n+def create_mock_app_state(fake):\n+    accounts = [\n+        RemindersAccount(id=UUID(fake.uuid4()), name=fake.company(), type=AccountType.ICLOUD),\n+        RemindersAccount(id=UUID(fake.uuid4()), name=fake.company(), type=AccountType.LOCAL)\n+    ]\n \n-    personal_reminders = app_state.get_reminders_by_list(UUID('22222222-2222-2222-2222-222222222222'))\n-    assert len(personal_reminders) == 1\n-    assert personal_reminders[0].title == 'Personal Task'\n+    for account in accounts:\n+        account.lists = [\n+            ReminderList(id=UUID(fake.uuid4()), name=fake.word())\n+        ]\n+        account.lists[0].reminders = [\n+            Reminder(id=UUID(fake.uuid4()), title=fake.sentence(nb_words=3))\n+            for _ in range(2)\n+        ]\n \n-def test_get_reminders_by_account():\n-    account1 = RemindersAccount(id=UUID('12345678-1234-5678-1234-567812345678'), name='iCloud', type=AccountType.ICLOUD)\n-    account2 = RemindersAccount(id=UUID('87654321-4321-8765-4321-876543210987'), name='Local', type=AccountType.LOCAL)\n+    accounts[1].lists[0].reminders.append(\n+        Reminder(id=UUID(fake.uuid4()), title=fake.sentence(nb_words=3))\n+    )\n \n-    list1 = ReminderList(id=UUID('11111111-1111-1111-1111-111111111111'), name='Work')\n-    list2 = ReminderList(id=UUID('22222222-2222-2222-2222-222222222222'), name='Personal')\n-\n-    reminder1 = Reminder(id=UUID('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'), title='iCloud Task 1')\n-    reminder2 = Reminder(id=UUID('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb'), title='iCloud Task 2')\n-    reminder3 = Reminder(id=UUID('cccccccc-cccc-cccc-cccc-cccccccccccc'), title='Local Task')\n-\n-    list1.reminders = [reminder1, reminder2]\n-    list2.reminders = [reminder3]\n-\n-    account1.lists = [list1]\n-    account2.lists = [list2]\n-\n-    app_state = RemindersAppState(accounts=[account1, account2])\n-\n-    icloud_reminders = app_state.get_reminders_by_account(UUID('12345678-1234-5678-1234-567812345678'))\n-    assert len(icloud_reminders) == 2\n-    assert set(reminder.title for reminder in icloud_reminders) == {'iCloud Task 1', 'iCloud Task 2'}\n-\n-    local_reminders = app_state.get_reminders_by_account(UUID('87654321-4321-8765-4321-876543210987'))\n-    assert len(local_reminders) == 1\n-    assert local_reminders[0].title == 'Local Task'\n+    return RemindersAppState(accounts=accounts)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724544033892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,13 @@\n from faker import Faker\n from src.dspygen.experiments.reminders_models import RemindersAppState, RemindersAccount, ReminderList, Reminder, AccountType\n from uuid import UUID\n import json\n+from typer.testing import CliRunner\n+from src.dspygen.experiments.wa_reminders import app\n \n+runner = CliRunner()\n+\n @pytest.fixture\n def fake():\n     return Faker()\n \n@@ -118,5 +122,37 @@\n     accounts[1].lists[0].reminders.append(\n         Reminder(id=UUID(fake.uuid4()), title=fake.sentence(nb_words=3))\n     )\n \n-    return RemindersAppState(accounts=accounts)\n\\ No newline at end of file\n+    return RemindersAppState(accounts=accounts)\n+\n+def test_list_reminders(mock_reminders_app_state, monkeypatch):\n+    monkeypatch.setattr('src.dspygen.experiments.wa_reminders.RemindersAppState.from_system', lambda: mock_reminders_app_state)\n+    \n+    result = runner.invoke(app, [\"list-reminders\"])\n+    assert result.exit_code == 0\n+    assert \"- \" in result.stdout  # Check if at least one reminder is listed\n+    \n+    # Count the number of reminders listed\n+    reminder_count = result.stdout.count(\"- \")\n+    assert reminder_count == 8  # 2 accounts * 2 lists * 2 reminders = 8 total reminders\n+\n+def test_list_reminders_with_list_name(mock_reminders_app_state, monkeypatch):\n+    monkeypatch.setattr('src.dspygen.experiments.wa_reminders.RemindersAppState.from_system', lambda: mock_reminders_app_state)\n+    \n+    list_name = mock_reminders_app_state.accounts[0].lists[0].name\n+    result = runner.invoke(app, [\"list-reminders\", \"--list-name\", list_name])\n+    assert result.exit_code == 0\n+    assert \"- \" in result.stdout\n+    \n+    reminder_count = result.stdout.count(\"- \")\n+    assert reminder_count == 2  # Only reminders from the specified list should be shown\n+\n+def test_list_reminders_empty_list(mock_reminders_app_state, monkeypatch):\n+    # Create a mock state with an empty list\n+    empty_list = ReminderList(id=UUID('12345678-1234-5678-1234-567812345678'), name=\"Empty List\")\n+    mock_reminders_app_state.accounts[0].lists.append(empty_list)\n+    monkeypatch.setattr('src.dspygen.experiments.wa_reminders.RemindersAppState.from_system', lambda: mock_reminders_app_state)\n+    \n+    result = runner.invoke(app, [\"list-reminders\", \"--list-name\", \"Empty List\"])\n+    assert result.exit_code == 0\n+    assert \"No reminders found in list 'Empty List'\" in result.stdout\n\\ No newline at end of file\n"
                }
            ],
            "date": 1724539735741,
            "name": "Commit-0",
            "content": "\n\n\n"
        }
    ]
}