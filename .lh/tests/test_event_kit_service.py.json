{
    "sourceFile": "tests/test_event_kit_service.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1724705606170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724705643280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import pytest\n+from unittest.mock import Mock, patch\n+from uuid import UUID\n+from datetime import datetime, timedelta\n+from src.dspygen.experiments.event_kit.event_kit_service import EventKitService, Calendar, Reminder\n+\n+@pytest.fixture\n+def mock_event_kit():\n+    with patch('src.dspygen.experiments.event_kit.event_kit_service.EventKit') as mock_ek:\n+        yield mock_ek\n+\n+@pytest.fixture\n+def event_kit_service(mock_event_kit):\n+    return EventKitService()\n+\n+@pytest.fixture\n+def sample_calendar():\n+    return Calendar(id=UUID('12345678-1234-5678-1234-567812345678'), title='Test Calendar')\n+\n+@pytest.fixture\n+def sample_reminder():\n+    return Reminder(\n+        id=UUID('87654321-4321-8765-4321-876543210987'),\n+        title='Test Reminder',\n+        due_date=datetime.now() + timedelta(days=1),\n+        completed=False,\n+        notes='Test notes',\n+        calendar_id=UUID('12345678-1234-5678-1234-567812345678')\n+    )\n+\n+def test_request_access(event_kit_service, mock_event_kit):\n+    # Test successful access request\n+    mock_event_kit.EKEntityTypeReminder = 'reminder'\n+    event_kit_service.store.requestAccessToEntityType.side_effect = lambda entity_type, completionHandler: completionHandler(True, None)\n+    event_kit_service.request_access()\n+\n+    # Test access denied\n+    event_kit_service.store.requestAccessToEntityType.side_effect = lambda entity_type, completionHandler: completionHandler(False, None)\n+    with pytest.raises(PermissionError):\n+        event_kit_service.request_access()\n+\n+def test_get_calendars(event_kit_service, mock_event_kit, sample_calendar):\n+    mock_calendar = Mock()\n+    mock_calendar.calendarIdentifier.return_value = str(sample_calendar.id)\n+    mock_calendar.title.return_value = sample_calendar.title\n+    event_kit_service.store.calendarsForEntityType_.return_value = [mock_calendar]\n+\n+    calendars = event_kit_service.get_calendars()\n+    assert len(calendars) == 1\n+    assert calendars[0].id == sample_calendar.id\n+    assert calendars[0].title == sample_calendar.title\n+\n+def test_get_reminders(event_kit_service, mock_event_kit, sample_calendar, sample_reminder):\n+    mock_calendar = Mock()\n+    mock_calendar.calendarIdentifier.return_value = str(sample_calendar.id)\n+    event_kit_service.store.calendarsForEntityType_.return_value = [mock_calendar]\n+\n+    mock_reminder = Mock()\n+    mock_reminder.calendarItemIdentifier.return_value = str(sample_reminder.id)\n+    mock_reminder.title.return_value = sample_reminder.title\n+    mock_reminder.dueDateComponents.return_value.date.return_value = sample_reminder.due_date\n+    mock_reminder.isCompleted.return_value = sample_reminder.completed\n+    mock_reminder.notes.return_value = sample_reminder.notes\n+\n+    event_kit_service.store.remindersMatchingPredicate_.return_value = [mock_reminder]\n+\n+    reminders = event_kit_service.get_reminders(sample_calendar.id)\n+    assert len(reminders) == 1\n+    assert reminders[0].id == sample_reminder.id\n+    assert reminders[0].title == sample_reminder.title\n+    assert reminders[0].due_date == sample_reminder.due_date\n+    assert reminders[0].completed == sample_reminder.completed\n+    assert reminders[0].notes == sample_reminder.notes\n+    assert reminders[0].calendar_id == sample_calendar.id\n+\n+def test_add_reminder(event_kit_service, mock_event_kit, sample_calendar, sample_reminder):\n+    mock_calendar = Mock()\n+    mock_calendar.calendarIdentifier.return_value = str(sample_calendar.id)\n+    event_kit_service.store.calendarsForEntityType_.return_value = [mock_calendar]\n+\n+    mock_new_reminder = Mock()\n+    mock_new_reminder.calendarItemIdentifier.return_value = str(sample_reminder.id)\n+    mock_new_reminder.title.return_value = sample_reminder.title\n+    mock_new_reminder.dueDateComponents.return_value.date.return_value = sample_reminder.due_date\n+    mock_new_reminder.isCompleted.return_value = sample_reminder.completed\n+    mock_new_reminder.notes.return_value = sample_reminder.notes\n+\n+    mock_event_kit.EKReminder.reminderWithEventStore_.return_value = mock_new_reminder\n+\n+    added_reminder = event_kit_service.add_reminder(sample_calendar.id, sample_reminder)\n+    assert added_reminder.id == sample_reminder.id\n+    assert added_reminder.title == sample_reminder.title\n+    assert added_reminder.due_date == sample_reminder.due_date\n+    assert added_reminder.completed == sample_reminder.completed\n+    assert added_reminder.notes == sample_reminder.notes\n+    assert added_reminder.calendar_id == sample_calendar.id\n+\n+    event_kit_service.store.saveReminder_commit_error_.assert_called_once()\n+\n+def test_update_reminder(event_kit_service, mock_event_kit, sample_calendar, sample_reminder):\n+    event_kit_service.get_reminders = Mock(return_value=[sample_reminder])\n+    event_kit_service.add_reminder = Mock(return_value=sample_reminder)\n+\n+    updated_reminder_data = sample_reminder.copy()\n+    updated_reminder_data.title = \"Updated Title\"\n+    updated_reminder_data.completed = True\n+\n+    updated_reminder = event_kit_service.update_reminder(sample_calendar.id, sample_reminder.id, updated_reminder_data)\n+    \n+    assert updated_reminder.id == sample_reminder.id\n+    assert updated_reminder.title == \"Updated Title\"\n+    assert updated_reminder.completed == True\n+    event_kit_service.add_reminder.assert_called_once()\n+\n+def test_delete_reminder(event_kit_service, mock_event_kit, sample_calendar, sample_reminder):\n+    event_kit_service.get_reminders = Mock(return_value=[sample_reminder])\n+    mock_reminder_to_delete = Mock()\n+    event_kit_service.store.calendarItemWithIdentifier_.return_value = mock_reminder_to_delete\n+\n+    event_kit_service.delete_reminder(sample_calendar.id, sample_reminder.id)\n+\n+    event_kit_service.store.removeReminder_commit_error_.assert_called_once_with(mock_reminder_to_delete, True, None)\n+\n+def test_reminder_not_found(event_kit_service, sample_calendar):\n+    event_kit_service.get_reminders = Mock(return_value=[])\n+    \n+    with pytest.raises(StopIteration):\n+        event_kit_service.update_reminder(sample_calendar.id, UUID('00000000-0000-0000-0000-000000000000'), Reminder(title=\"Non-existent Reminder\", calendar_id=sample_calendar.id))\n+\n+    with pytest.raises(StopIteration):\n+        event_kit_service.delete_reminder(sample_calendar.id, UUID('00000000-0000-0000-0000-000000000000'))\n+\n+def test_calendar_not_found(event_kit_service, mock_event_kit):\n+    event_kit_service.store.calendarsForEntityType_.return_value = []\n+    \n+    with pytest.raises(StopIteration):\n+        event_kit_service.get_reminders(UUID('00000000-0000-0000-0000-000000000000'))\n+\n+    with pytest.raises(StopIteration):\n+        event_kit_service.add_reminder(UUID('00000000-0000-0000-0000-000000000000'), Reminder(title=\"Test Reminder\", calendar_id=UUID('00000000-0000-0000-0000-000000000000')))\n\\ No newline at end of file\n"
                }
            ],
            "date": 1724705606170,
            "name": "Commit-0",
            "content": "import pytest\nfrom unittest.mock import Mock, patch\nfrom uuid import UUID\nfrom datetime import datetime, timedelta\nfrom src.dspygen.experiments.event_kit.event_kit_service import EventKitService, Calendar, Reminder\n\n@pytest.fixture\ndef mock_event_kit():\n    with patch('src.dspygen.experiments.event_kit.event_kit_service.EventKit') as mock_ek:\n        yield mock_ek\n\n@pytest.fixture\ndef event_kit_service(mock_event_kit):\n    return EventKitService()\n\n@pytest.fixture\ndef sample_calendar():\n    return Calendar(id=UUID('12345678-1234-5678-1234-567812345678'), title='Test Calendar')\n\n@pytest.fixture\ndef sample_reminder():\n    return Reminder(\n        id=UUID('87654321-4321-8765-4321-876543210987'),\n        title='Test Reminder',\n        due_date=datetime.now() + timedelta(days=1),\n        completed=False,\n        notes='Test notes',\n        calendar_id=UUID('12345678-1234-5678-1234-567812345678')\n    )\n\ndef test_request_access(event_kit_service, mock_event_kit):\n    # Test successful access request\n    mock_event_kit.EKEntityTypeReminder = 'reminder'\n    event_kit_service.store.requestAccessToEntityType_completion.side_effect = lambda entity_type, handler: handler(True, None)\n    event_kit_service.request_access()\n\n    # Test access denied\n    event_kit_service.store.requestAccessToEntityType_completion.side_effect = lambda entity_type, handler: handler(False, None)\n    with pytest.raises(PermissionError):\n        event_kit_service.request_access()\n\ndef test_get_calendars(event_kit_service, mock_event_kit, sample_calendar):\n    mock_calendar = Mock()\n    mock_calendar.calendarIdentifier.return_value = str(sample_calendar.id)\n    mock_calendar.title.return_value = sample_calendar.title\n    event_kit_service.store.calendarsForEntityType_.return_value = [mock_calendar]\n\n    calendars = event_kit_service.get_calendars()\n    assert len(calendars) == 1\n    assert calendars[0].id == sample_calendar.id\n    assert calendars[0].title == sample_calendar.title\n\ndef test_get_reminders(event_kit_service, mock_event_kit, sample_calendar, sample_reminder):\n    mock_calendar = Mock()\n    mock_calendar.calendarIdentifier.return_value = str(sample_calendar.id)\n    event_kit_service.store.calendarsForEntityType_.return_value = [mock_calendar]\n\n    mock_reminder = Mock()\n    mock_reminder.calendarItemIdentifier.return_value = str(sample_reminder.id)\n    mock_reminder.title.return_value = sample_reminder.title\n    mock_reminder.dueDateComponents.return_value.date.return_value = sample_reminder.due_date\n    mock_reminder.isCompleted.return_value = sample_reminder.completed\n    mock_reminder.notes.return_value = sample_reminder.notes\n\n    event_kit_service.store.remindersMatchingPredicate_.return_value = [mock_reminder]\n\n    reminders = event_kit_service.get_reminders(sample_calendar.id)\n    assert len(reminders) == 1\n    assert reminders[0].id == sample_reminder.id\n    assert reminders[0].title == sample_reminder.title\n    assert reminders[0].due_date == sample_reminder.due_date\n    assert reminders[0].completed == sample_reminder.completed\n    assert reminders[0].notes == sample_reminder.notes\n    assert reminders[0].calendar_id == sample_calendar.id\n\ndef test_add_reminder(event_kit_service, mock_event_kit, sample_calendar, sample_reminder):\n    mock_calendar = Mock()\n    mock_calendar.calendarIdentifier.return_value = str(sample_calendar.id)\n    event_kit_service.store.calendarsForEntityType_.return_value = [mock_calendar]\n\n    mock_new_reminder = Mock()\n    mock_new_reminder.calendarItemIdentifier.return_value = str(sample_reminder.id)\n    mock_new_reminder.title.return_value = sample_reminder.title\n    mock_new_reminder.dueDateComponents.return_value.date.return_value = sample_reminder.due_date\n    mock_new_reminder.isCompleted.return_value = sample_reminder.completed\n    mock_new_reminder.notes.return_value = sample_reminder.notes\n\n    mock_event_kit.EKReminder.reminderWithEventStore_.return_value = mock_new_reminder\n\n    added_reminder = event_kit_service.add_reminder(sample_calendar.id, sample_reminder)\n    assert added_reminder.id == sample_reminder.id\n    assert added_reminder.title == sample_reminder.title\n    assert added_reminder.due_date == sample_reminder.due_date\n    assert added_reminder.completed == sample_reminder.completed\n    assert added_reminder.notes == sample_reminder.notes\n    assert added_reminder.calendar_id == sample_calendar.id\n\n    event_kit_service.store.saveReminder_commit_error_.assert_called_once()\n\ndef test_update_reminder(event_kit_service, mock_event_kit, sample_calendar, sample_reminder):\n    event_kit_service.get_reminders = Mock(return_value=[sample_reminder])\n    event_kit_service.add_reminder = Mock(return_value=sample_reminder)\n\n    updated_reminder_data = sample_reminder.copy()\n    updated_reminder_data.title = \"Updated Title\"\n    updated_reminder_data.completed = True\n\n    updated_reminder = event_kit_service.update_reminder(sample_calendar.id, sample_reminder.id, updated_reminder_data)\n    \n    assert updated_reminder.id == sample_reminder.id\n    assert updated_reminder.title == \"Updated Title\"\n    assert updated_reminder.completed == True\n    event_kit_service.add_reminder.assert_called_once()\n\ndef test_delete_reminder(event_kit_service, mock_event_kit, sample_calendar, sample_reminder):\n    event_kit_service.get_reminders = Mock(return_value=[sample_reminder])\n    mock_reminder_to_delete = Mock()\n    event_kit_service.store.calendarItemWithIdentifier_.return_value = mock_reminder_to_delete\n\n    event_kit_service.delete_reminder(sample_calendar.id, sample_reminder.id)\n\n    event_kit_service.store.removeReminder_commit_error_.assert_called_once_with(mock_reminder_to_delete, True, None)\n\ndef test_reminder_not_found(event_kit_service, sample_calendar):\n    event_kit_service.get_reminders = Mock(return_value=[])\n    \n    with pytest.raises(StopIteration):\n        event_kit_service.update_reminder(sample_calendar.id, UUID('00000000-0000-0000-0000-000000000000'), Reminder(title=\"Non-existent Reminder\", calendar_id=sample_calendar.id))\n\n    with pytest.raises(StopIteration):\n        event_kit_service.delete_reminder(sample_calendar.id, UUID('00000000-0000-0000-0000-000000000000'))\n\ndef test_calendar_not_found(event_kit_service, mock_event_kit):\n    event_kit_service.store.calendarsForEntityType_.return_value = []\n    \n    with pytest.raises(StopIteration):\n        event_kit_service.get_reminders(UUID('00000000-0000-0000-0000-000000000000'))\n\n    with pytest.raises(StopIteration):\n        event_kit_service.add_reminder(UUID('00000000-0000-0000-0000-000000000000'), Reminder(title=\"Test Reminder\", calendar_id=UUID('00000000-0000-0000-0000-000000000000')))"
        }
    ]
}