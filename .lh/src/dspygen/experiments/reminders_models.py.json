{
    "sourceFile": "src/dspygen/experiments/reminders_models.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1724539089221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724539113430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,1 @@\n-from pydantic import BaseModel, Field\n \n"
                },
                {
                    "date": 1724539250925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,28 @@\n+from pydantic import BaseModel, Field, ConfigDict\n+from typing import List, Optional\n+from datetime import datetime, date, time\n+from enum import Enum\n+import uuid\n \n+class Priority(Enum):\n+    NONE = 0\n+    LOW = 1\n+    MEDIUM = 5\n+    HIGH = 9\n+\n+class RecurrenceFrequency(Enum):\n+    DAILY = \"daily\"\n+    WEEKLY = \"weekly\"\n+    MONTHLY = \"monthly\"\n+    YEARLY = \"yearly\"\n+\n+class Recurrence(BaseModel):\n+    frequency: RecurrenceFrequency\n+    interval: int = Field(1, ge=1)\n+    end_date: Optional[date] = None\n+    end_occurrence_count: Optional[int] = Field(None, ge=1)\n+\n+class Reminder(BaseModel):\n+    model_config = ConfigDict(frozen=True)\n+\n+\n"
                },
                {
                    "date": 1724539271996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+from pydantic import BaseModel, Field, ConfigDict\n+from typing import List, Optional\n+from datetime import datetime, date, time\n+from enum import Enum\n+import uuid\n+\n+class Priority(Enum):\n+    NONE = 0\n+    LOW = 1\n+    MEDIUM = 5\n+    HIGH = 9\n+\n+class RecurrenceFrequency(Enum):\n+    DAILY = \"daily\"\n+    WEEKLY = \"weekly\"\n+    MONTHLY = \"monthly\"\n+    YEARLY = \"yearly\"\n+\n+class Recurrence(BaseModel):\n+    frequency: RecurrenceFrequency\n+    interval: int = Field(1, ge=1)\n+    end_date: Optional[date] = None\n+    end_occurrence_count: Optional[int] = Field(None, ge=1)\n+\n+class Reminder(BaseModel):\n+    model_config = ConfigDict(frozen=True)\n+\n+    id: uuid.UUID = Field(default_factory=uuid.uuid4)\n+    title: str = Field(..., min_length=1, max_length=255)\n+    notes: Optional[str] = None\n+    due_date: Optional[date] = None\n+    due_time: Optional[time] = None\n+    completion_date: Optional[datetime] = None\n+    priority: Priority = Priority.NONE\n+    is_flagged: bool = False\n+    recurrence: Optional[Recurrence] = None\n+    url: Optional[str] = None\n+    location: Optional[str] = None\n+    created_date: datetime = Field(default_factory=datetime.now)\n+    modified_date: datetime = Field(default_factory=datetime.now)\n+\n+class ReminderList(BaseModel):\n+    model_config = ConfigDict(frozen=True)\n+\n+    id: uuid.UUID = Field(default_factory=uuid.uuid4)\n+    name: str = Field(..., min_length=1, max_length=255)\n+    color: Optional[str] = None\n+    is_default: bool = False\n+    reminders: List[Reminder] = Field(default_factory=list)\n+    created_date: datetime = Field(default_factory=datetime.now)\n+    modified_date: datetime = Field(default_factory=datetime.now)\n+\n+class AccountType(Enum):\n+    ICLOUD = \"iCloud\"\n+    EXCHANGE = \"Exchange\"\n+    LOCAL = \"Local\"\n+    OTHER = \"Other\"\n+\n+class RemindersAccount(BaseModel):\n+    model_config = ConfigDict(frozen=True)\n+\n+    id: uuid.UUID = Field(default_factory=uuid.uuid4)\n+    name: str\n+    type: AccountType\n+    lists: List[ReminderList] = Field(default_factory=list)\n+\n+class RemindersAppState(BaseModel):\n+    model_config = ConfigDict(frozen=True)\n+\n+    accounts: List[RemindersAccount] = Field(default_factory=list)\n+    default_account: Optional[uuid.UUID] = None\n+\n+    def get_all_reminders(self) -> List[Reminder]:\n+        return [\n+            reminder\n+            for account in self.accounts\n+            for reminder_list in account.lists\n+            for reminder in reminder_list.reminders\n+        ]\n+\n+    def get_reminders_by_list(self, list_id: uuid.UUID) -> List[Reminder]:\n+        for account in self.accounts:\n+            for reminder_list in account.lists:\n+                if reminder_list.id == list_id:\n+                    return reminder_list.reminders\n+        return []\n+\n+    def get_reminders_by_account(self, account_id: uuid.UUID) -> List[Reminder]:\n+        for account in self.accounts:\n+            if account.id == account_id:\n+                return [\n+                    reminder\n+                    for reminder_list in account.lists\n+                    for reminder in reminder_list.reminders\n+                ]\n+        return []\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724539359809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,31 +92,5 @@\n                     reminder\n                     for reminder_list in account.lists\n                     for reminder in reminder_list.reminders\n                 ]\n-        return []\n-from pydantic import BaseModel, Field, ConfigDict\n-from typing import List, Optional\n-from datetime import datetime, date, time\n-from enum import Enum\n-import uuid\n-\n-class Priority(Enum):\n-    NONE = 0\n-    LOW = 1\n-    MEDIUM = 5\n-    HIGH = 9\n-\n-class RecurrenceFrequency(Enum):\n-    DAILY = \"daily\"\n-    WEEKLY = \"weekly\"\n-    MONTHLY = \"monthly\"\n-    YEARLY = \"yearly\"\n-\n-class Recurrence(BaseModel):\n-    frequency: RecurrenceFrequency\n-    interval: int = Field(1, ge=1)\n-    end_date: Optional[date] = None\n-    end_occurrence_count: Optional[int] = Field(None, ge=1)\n-\n-class Reminder(BaseModel):\n-    model_config = ConfigDict(frozen=True)\n\\ No newline at end of file\n+        return []\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724539669616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n+import subprocess\n from pydantic import BaseModel, Field, ConfigDict\n-from typing import List, Optional\n+from typing import List, Optional, Dict\n from datetime import datetime, date, time\n from enum import Enum\n import uuid\n \n@@ -92,5 +93,83 @@\n                     reminder\n                     for reminder_list in account.lists\n                     for reminder in reminder_list.reminders\n                 ]\n-        return []\n\\ No newline at end of file\n+        return []\n+\n+    @classmethod\n+    def from_system(cls) -> 'RemindersAppState':\n+        accounts = cls._fetch_accounts()\n+        return cls(accounts=accounts)\n+\n+    @staticmethod\n+    def _run_applescript(script: str) -> str:\n+        process = subprocess.Popen(['osascript', '-e', script], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+        output, error = process.communicate()\n+        if error:\n+            raise RuntimeError(f\"AppleScript error: {error.decode('utf-8')}\")\n+        return output.decode('utf-8').strip()\n+\n+    @classmethod\n+    def _fetch_accounts(cls) -> List[RemindersAccount]:\n+        script = '''\n+        tell application \"Reminders\"\n+            set accountList to {}\n+            repeat with anAccount in accounts\n+                set end of accountList to {id:id of anAccount, name:name of anAccount}\n+            end repeat\n+            return accountList\n+        end tell\n+        '''\n+        accounts_data = cls._run_applescript(script)\n+        # Parse accounts_data and create RemindersAccount objects\n+        # This is a simplified example; you'll need to implement proper parsing\n+        accounts = []\n+        for account_info in accounts_data.split(', '):\n+            account_id, account_name = account_info.split(':')\n+            account = RemindersAccount(\n+                id=uuid.UUID(account_id),\n+                name=account_name,\n+                type=AccountType.OTHER,  # You might need to determine the correct type\n+                lists=cls._fetch_lists(account_id)\n+            )\n+            accounts.append(account)\n+        return accounts\n+\n+    @classmethod\n+    def _fetch_lists(cls, account_id: str) -> List[ReminderList]:\n+        script = f'''\n+        tell application \"Reminders\"\n+            set listData to {{}}\n+            set targetAccount to account id \"{account_id}\"\n+            repeat with aList in lists of targetAccount\n+                set listInfo to {{id:id of aList, name:name of aList}}\n+                set end of listData to listInfo\n+            end repeat\n+            return listData\n+        end tell\n+        '''\n+        lists_data = cls._run_applescript(script)\n+        # Parse lists_data and create ReminderList objects\n+        # This is a simplified example; you'll need to implement proper parsing\n+        reminder_lists = []\n+        for list_info in lists_data.split(', '):\n+            list_id, list_name = list_info.split(':')\n+            reminder_list = ReminderList(\n+                id=uuid.UUID(list_id),\n+                name=list_name,\n+                reminders=cls._fetch_reminders(list_id)\n+            )\n+            reminder_lists.append(reminder_list)\n+        return reminder_lists\n+\n+    @classmethod\n+    def _fetch_reminders(cls, list_id: str) -> List[Reminder]:\n+        script = f'''\n+        tell application \"Reminders\"\n+            set reminderData to {{}}\n+            set targetList to list id \"{list_id}\"\n+            repeat with aReminder in reminders of targetList\n+                set reminderInfo to {{id:id of aReminder, name:name of aReminder, notes:body of aReminder, dueDate:due date of aReminder}}\n+                set end of reminderData to reminderInfo\n+            end repeat\n+            return reminderData\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724540068837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n from typing import List, Optional, Dict\n from datetime import datetime, date, time\n from enum import Enum\n import uuid\n+import ast\n \n class Priority(Enum):\n     NONE = 0\n     LOW = 1\n@@ -114,19 +115,17 @@\n         script = '''\n         tell application \"Reminders\"\n             set accountList to {}\n             repeat with anAccount in accounts\n-                set end of accountList to {id:id of anAccount, name:name of anAccount}\n+                set end of accountList to {id of anAccount as string, name of anAccount}\n             end repeat\n             return accountList\n         end tell\n         '''\n         accounts_data = cls._run_applescript(script)\n-        # Parse accounts_data and create RemindersAccount objects\n-        # This is a simplified example; you'll need to implement proper parsing\n         accounts = []\n-        for account_info in accounts_data.split(', '):\n-            account_id, account_name = account_info.split(':')\n+        for account_info in ast.literal_eval(accounts_data):\n+            account_id, account_name = account_info\n             account = RemindersAccount(\n                 id=uuid.UUID(account_id),\n                 name=account_name,\n                 type=AccountType.OTHER,  # You might need to determine the correct type\n@@ -141,10 +140,9 @@\n         tell application \"Reminders\"\n             set listData to {{}}\n             set targetAccount to account id \"{account_id}\"\n             repeat with aList in lists of targetAccount\n-                set listInfo to {{id:id of aList, name:name of aList}}\n-                set end of listData to listInfo\n+                set end of listData to {{id of aList as string, name of aList}}\n             end repeat\n             return listData\n         end tell\n         '''\n@@ -171,5 +169,21 @@\n             repeat with aReminder in reminders of targetList\n                 set reminderInfo to {{id:id of aReminder, name:name of aReminder, notes:body of aReminder, dueDate:due date of aReminder}}\n                 set end of reminderData to reminderInfo\n             end repeat\n-            return reminderData\n\\ No newline at end of file\n+            return reminderData\n+        end tell\n+        '''\n+        reminders_data = cls._run_applescript(script)\n+        # Parse reminders_data and create Reminder objects\n+        # This is a simplified example; you'll need to implement proper parsing\n+        reminders = []\n+        for reminder_info in reminders_data.split(', '):\n+            reminder_id, title, notes, due_date = reminder_info.split(':')\n+            reminder = Reminder(\n+                id=uuid.UUID(reminder_id),\n+                title=title,\n+                notes=notes if notes != \"missing value\" else None,\n+                due_date=datetime.strptime(due_date, \"%Y-%m-%d\").date() if due_date != \"missing value\" else None\n+            )\n+            reminders.append(reminder)\n+        return reminders\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724540145033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n from typing import List, Optional, Dict\n from datetime import datetime, date, time\n from enum import Enum\n import uuid\n-import ast\n \n class Priority(Enum):\n     NONE = 0\n     LOW = 1\n@@ -115,17 +114,19 @@\n         script = '''\n         tell application \"Reminders\"\n             set accountList to {}\n             repeat with anAccount in accounts\n-                set end of accountList to {id of anAccount as string, name of anAccount}\n+                set end of accountList to {id:id of anAccount, name:name of anAccount}\n             end repeat\n             return accountList\n         end tell\n         '''\n         accounts_data = cls._run_applescript(script)\n+        # Parse accounts_data and create RemindersAccount objects\n+        # This is a simplified example; you'll need to implement proper parsing\n         accounts = []\n-        for account_info in ast.literal_eval(accounts_data):\n-            account_id, account_name = account_info\n+        for account_info in accounts_data.split(', '):\n+            account_id, account_name = account_info.split(':')\n             account = RemindersAccount(\n                 id=uuid.UUID(account_id),\n                 name=account_name,\n                 type=AccountType.OTHER,  # You might need to determine the correct type\n@@ -140,9 +141,10 @@\n         tell application \"Reminders\"\n             set listData to {{}}\n             set targetAccount to account id \"{account_id}\"\n             repeat with aList in lists of targetAccount\n-                set end of listData to {{id of aList as string, name of aList}}\n+                set listInfo to {{id:id of aList, name:name of aList}}\n+                set end of listData to listInfo\n             end repeat\n             return listData\n         end tell\n         '''\n"
                },
                {
                    "date": 1724540202984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n from typing import List, Optional, Dict\n from datetime import datetime, date, time\n from enum import Enum\n import uuid\n+import ast\n \n class Priority(Enum):\n     NONE = 0\n     LOW = 1\n@@ -114,19 +115,17 @@\n         script = '''\n         tell application \"Reminders\"\n             set accountList to {}\n             repeat with anAccount in accounts\n-                set end of accountList to {id:id of anAccount, name:name of anAccount}\n+                set end of accountList to {id of anAccount as string, name of anAccount}\n             end repeat\n             return accountList\n         end tell\n         '''\n         accounts_data = cls._run_applescript(script)\n-        # Parse accounts_data and create RemindersAccount objects\n-        # This is a simplified example; you'll need to implement proper parsing\n         accounts = []\n-        for account_info in accounts_data.split(', '):\n-            account_id, account_name = account_info.split(':')\n+        for account_info in ast.literal_eval(accounts_data):\n+            account_id, account_name = account_info\n             account = RemindersAccount(\n                 id=uuid.UUID(account_id),\n                 name=account_name,\n                 type=AccountType.OTHER,  # You might need to determine the correct type\n@@ -141,20 +140,17 @@\n         tell application \"Reminders\"\n             set listData to {{}}\n             set targetAccount to account id \"{account_id}\"\n             repeat with aList in lists of targetAccount\n-                set listInfo to {{id:id of aList, name:name of aList}}\n-                set end of listData to listInfo\n+                set end of listData to {{id of aList as string, name of aList}}\n             end repeat\n             return listData\n         end tell\n         '''\n         lists_data = cls._run_applescript(script)\n-        # Parse lists_data and create ReminderList objects\n-        # This is a simplified example; you'll need to implement proper parsing\n         reminder_lists = []\n-        for list_info in lists_data.split(', '):\n-            list_id, list_name = list_info.split(':')\n+        for list_info in ast.literal_eval(lists_data):\n+            list_id, list_name = list_info\n             reminder_list = ReminderList(\n                 id=uuid.UUID(list_id),\n                 name=list_name,\n                 reminders=cls._fetch_reminders(list_id)\n@@ -168,20 +164,17 @@\n         tell application \"Reminders\"\n             set reminderData to {{}}\n             set targetList to list id \"{list_id}\"\n             repeat with aReminder in reminders of targetList\n-                set reminderInfo to {{id:id of aReminder, name:name of aReminder, notes:body of aReminder, dueDate:due date of aReminder}}\n-                set end of reminderData to reminderInfo\n+                set end of reminderData to {{id of aReminder as string, name of aReminder, body of aReminder, due date of aReminder}}\n             end repeat\n             return reminderData\n         end tell\n         '''\n         reminders_data = cls._run_applescript(script)\n-        # Parse reminders_data and create Reminder objects\n-        # This is a simplified example; you'll need to implement proper parsing\n         reminders = []\n-        for reminder_info in reminders_data.split(', '):\n-            reminder_id, title, notes, due_date = reminder_info.split(':')\n+        for reminder_info in ast.literal_eval(reminders_data):\n+            reminder_id, title, notes, due_date = reminder_info\n             reminder = Reminder(\n                 id=uuid.UUID(reminder_id),\n                 title=title,\n                 notes=notes if notes != \"missing value\" else None,\n"
                }
            ],
            "date": 1724539089221,
            "name": "Commit-0",
            "content": "from pydantic import BaseModel, Field\n\n"
        }
    ]
}