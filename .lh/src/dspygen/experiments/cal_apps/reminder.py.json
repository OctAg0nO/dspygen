{
    "sourceFile": "src/dspygen/experiments/cal_apps/reminder.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1724784593935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724784728019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,53 @@\n- \n\\ No newline at end of file\n+import objc\n+import EventKit\n+from datetime import datetime\n+from typing import Optional\n+\n+class Reminder:\n+    def __init__(self, title: str, due_date: Optional[str] = None, flagged: bool = False, completed: bool = False, ek_reminder=None):\n+        self.title = title\n+        self.due_date = due_date\n+        self.flagged = flagged\n+        self.completed = completed\n+        self.ek_reminder = ek_reminder\n+\n+    def mark_as_completed(self):\n+        if self.ek_reminder:\n+            self.ek_reminder.completed = True\n+        self.completed = True\n+\n+    def flag(self):\n+        if self.ek_reminder:\n+            self.ek_reminder.flagged = True\n+        self.flagged = True\n+\n+    def unflag(self):\n+        if self.ek_reminder:\n+            self.ek_reminder.flagged = False\n+        self.flagged = False\n+\n+    def save(self, event_store):\n+        if self.ek_reminder is None:\n+            self.ek_reminder = EventKit.EKReminder.reminderWithEventStore_(event_store)\n+        self.ek_reminder.title = self.title\n+        self.ek_reminder.completed = self.completed\n+        self.ek_reminder.flagged = self.flagged\n+        if self.due_date:\n+            self.ek_reminder.dueDateComponents = self._parse_due_date(self.due_date)\n+        event_store.saveReminder_commit_error_(self.ek_reminder, True, None)\n+\n+    def remove(self, event_store):\n+        if self.ek_reminder:\n+            event_store.removeReminder_commit_error_(self.ek_reminder, True, None)\n+\n+    @staticmethod\n+    def _parse_due_date(due_date_str: str):\n+        date_format = \"%Y-%m-%d %H:%M\"\n+        dt = datetime.strptime(due_date_str, date_format)\n+        components = objc.NSDateComponents()\n+        components.year = dt.year\n+        components.month = dt.month\n+        components.day = dt.day\n+        components.hour = dt.hour\n+        components.minute = dt.minute\n+        return components\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724785181118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,79 @@\n+import EventKit\n+from datetime import datetime\n+from typing import Optional, List\n+\n+class Reminder:\n+    def __init__(self, event_store: EventKit.EKEventStore, title: str, calendar: EventKit.EKCalendar):\n+        self.event_store = event_store\n+        self.ek_reminder = EventKit.EKReminder.reminderWithEventStore_(event_store)\n+        self.ek_reminder.title = title\n+        self.ek_reminder.calendar = calendar\n+\n+    @property\n+    def title(self) -> str:\n+        return self.ek_reminder.title\n+\n+    @title.setter\n+    def title(self, value: str):\n+        self.ek_reminder.title = value\n+\n+    @property\n+    def due_date(self) -> Optional[datetime]:\n+        if self.ek_reminder.dueDateComponents:\n+            return datetime(\n+                year=self.ek_reminder.dueDateComponents.year,\n+                month=self.ek_reminder.dueDateComponents.month,\n+                day=self.ek_reminder.dueDateComponents.day,\n+                hour=self.ek_reminder.dueDateComponents.hour,\n+                minute=self.ek_reminder.dueDateComponents.minute\n+            )\n+        return None\n+\n+    @due_date.setter\n+    def due_date(self, value: Optional[datetime]):\n+        if value:\n+            components = EventKit.NSDateComponents.alloc().init()\n+            components.year = value.year\n+            components.month = value.month\n+            components.day = value.day\n+            components.hour = value.hour\n+            components.minute = value.minute\n+            self.ek_reminder.dueDateComponents = components\n+        else:\n+            self.ek_reminder.dueDateComponents = None\n+\n+    @property\n+    def flagged(self) -> bool:\n+        return self.ek_reminder.flagged\n+\n+    @flagged.setter\n+    def flagged(self, value: bool):\n+        self.ek_reminder.flagged = value\n+\n+    @property\n+    def completed(self) -> bool:\n+        return self.ek_reminder.completed\n+\n+    @completed.setter\n+    def completed(self, value: bool):\n+        self.ek_reminder.completed = value\n+        if value:\n+            self.ek_reminder.completionDate = EventKit.NSDate.date()\n+        else:\n+            self.ek_reminder.completionDate = None\n+\n+    def add_alarm(self, alarm: EventKit.EKAlarm):\n+        self.ek_reminder.addAlarm_(alarm)\n+\n+    def remove_alarm(self, alarm: EventKit.EKAlarm):\n+        self.ek_reminder.removeAlarm_(alarm)\n+\n+    @property\n+    def alarms(self) -> List[EventKit.EKAlarm]:\n+        return self.ek_reminder.alarms()\n+\n+    def save(self) -> bool:\n+        return self.event_store.saveReminder_commit_error_(self.ek_reminder, True, None)\n+\n+    def remove(self) -> bool:\n+        return self.event_store.removeReminder_commit_error_(self.ek_reminder, True, None)\n\\ No newline at end of file\n"
                }
            ],
            "date": 1724784593935,
            "name": "Commit-0",
            "content": "import objc\nimport EventKit\nfrom datetime import datetime\nfrom typing import Optional\n\nclass Reminder:\n    def __init__(self, title: str, due_date: Optional[str] = None, flagged: bool = False, completed: bool = False, ek_reminder=None):\n        self.title = title\n        self.due_date = due_date\n        self.flagged = flagged\n        self.completed = completed\n        self.ek_reminder = ek_reminder\n\n    def mark_as_completed(self):\n        if self.ek_reminder:\n            self.ek_reminder.completed = True\n        self.completed = True\n\n    def flag(self):\n        if self.ek_reminder:\n            self.ek_reminder.flagged = True\n        self.flagged = True\n\n    def unflag(self):\n        if self.ek_reminder:\n            self.ek_reminder.flagged = False\n        self.flagged = False\n\n    def save(self, event_store):\n        if self.ek_reminder is None:\n            self.ek_reminder = EventKit.EKReminder.reminderWithEventStore_(event_store)\n        self.ek_reminder.title = self.title\n        self.ek_reminder.completed = self.completed\n        self.ek_reminder.flagged = self.flagged\n        if self.due_date:\n            self.ek_reminder.dueDateComponents = self._parse_due_date(self.due_date)\n        event_store.saveReminder_commit_error_(self.ek_reminder, True, None)\n\n    def remove(self, event_store):\n        if self.ek_reminder:\n            event_store.removeReminder_commit_error_(self.ek_reminder, True, None)\n\n    @staticmethod\n    def _parse_due_date(due_date_str: str):\n        date_format = \"%Y-%m-%d %H:%M\"\n        dt = datetime.strptime(due_date_str, date_format)\n        components = objc.NSDateComponents()\n        components.year = dt.year\n        components.month = dt.month\n        components.day = dt.day\n        components.hour = dt.hour\n        components.minute = dt.minute\n        return components"
        }
    ]
}