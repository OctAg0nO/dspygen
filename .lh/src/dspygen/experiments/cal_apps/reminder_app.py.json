{
    "sourceFile": "src/dspygen/experiments/cal_apps/reminder_app.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1724784607789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724784647013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import EventKit\n from typing import List, Optional\n-from .reminder_list import ReminderList\n \n class ReminderApp:\n     def __init__(self):\n         self.event_store = EventKit.EKEventStore.new()\n"
                },
                {
                    "date": 1724784731115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import EventKit\n from typing import List, Optional\n+from .reminder_list import ReminderList\n \n class ReminderApp:\n     def __init__(self):\n         self.event_store = EventKit.EKEventStore.new()\n"
                },
                {
                    "date": 1724784740872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,56 @@\n+import EventKit\n+from typing import List, Optional\n+\n+class ReminderApp:\n+    def __init__(self):\n+        self.event_store = EventKit.EKEventStore.new()\n+        self.lists: List[ReminderList] = []\n+        self.selected_list: Optional[ReminderList] = None\n+        self._load_existing_lists()\n+\n+    def _load_existing_lists(self):\n+        calendars = self.event_store.calendarsForEntityType_(EventKit.EKEntityTypeReminder)\n+        for calendar in calendars:\n+            self.lists.append(ReminderList(calendar.title, self.event_store))\n+\n+    def request_access(self):\n+        \"\"\"Request access to reminders.\"\"\"\n+        def callback(granted, error):\n+            if not granted:\n+                raise PermissionError(\"Access to reminders denied.\")\n+        self.event_store.requestAccessToEntityType_completion_(EventKit.EKEntityTypeReminder, callback)\n+\n+    def add_list(self, reminder_list: ReminderList):\n+        self.lists.append(reminder_list)\n+\n+    def remove_list(self, reminder_list: ReminderList):\n+        if reminder_list.ek_calendar:\n+            self.event_store.removeCalendar_commit_error_(reminder_list.ek_calendar, True, None)\n+        self.lists.remove(reminder_list)\n+\n+    def select_list(self, list_name: str):\n+        for lst in self.lists:\n+            if lst.name == list_name:\n+                self.selected_list = lst\n+                return\n+        raise ValueError(f\"List '{list_name}' not found\")\n+\n+    def add_reminder_to_selected(self, reminder):\n+        if self.selected_list:\n+            self.selected_list.add_reminder(reminder)\n+        else:\n+            raise ValueError(\"No list selected\")\n+\n+    def get_reminders(self, completed: Optional[bool] = None):\n+        if self.selected_list:\n+            return self.selected_list.get_reminders(completed)\n+        else:\n+            raise ValueError(\"No list selected\")\n+\n+    def clear_completed_reminders(self):\n+        if self.selected_list:\n+            completed_reminders = self.selected_list.get_reminders(completed=True)\n+            for reminder in completed_reminders:\n+                self.selected_list.remove_reminder(reminder)\n+        else:\n+            raise ValueError(\"No list selected\")\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724784746236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import EventKit\n from typing import List, Optional\n+from dspygen.experiments.cal_apps import ReminderList\n \n class ReminderApp:\n     def __init__(self):\n         self.event_store = EventKit.EKEventStore.new()\n@@ -52,62 +53,5 @@\n             completed_reminders = self.selected_list.get_reminders(completed=True)\n             for reminder in completed_reminders:\n                 self.selected_list.remove_reminder(reminder)\n         else:\n-            raise ValueError(\"No list selected\")\n-import EventKit\n-from typing import List, Optional\n-from .reminder_list import ReminderList\n-\n-class ReminderApp:\n-    def __init__(self):\n-        self.event_store = EventKit.EKEventStore.new()\n-        self.lists: List[ReminderList] = []\n-        self.selected_list: Optional[ReminderList] = None\n-        self._load_existing_lists()\n-\n-    def _load_existing_lists(self):\n-        calendars = self.event_store.calendarsForEntityType_(EventKit.EKEntityTypeReminder)\n-        for calendar in calendars:\n-            self.lists.append(ReminderList(calendar.title, self.event_store))\n-\n-    def request_access(self):\n-        \"\"\"Request access to reminders.\"\"\"\n-        def callback(granted, error):\n-            if not granted:\n-                raise PermissionError(\"Access to reminders denied.\")\n-        self.event_store.requestAccessToEntityType_completion_(EventKit.EKEntityTypeReminder, callback)\n-\n-    def add_list(self, reminder_list: ReminderList):\n-        self.lists.append(reminder_list)\n-\n-    def remove_list(self, reminder_list: ReminderList):\n-        if reminder_list.ek_calendar:\n-            self.event_store.removeCalendar_commit_error_(reminder_list.ek_calendar, True, None)\n-        self.lists.remove(reminder_list)\n-\n-    def select_list(self, list_name: str):\n-        for lst in self.lists:\n-            if lst.name == list_name:\n-                self.selected_list = lst\n-                return\n-        raise ValueError(f\"List '{list_name}' not found\")\n-\n-    def add_reminder_to_selected(self, reminder):\n-        if self.selected_list:\n-            self.selected_list.add_reminder(reminder)\n-        else:\n-            raise ValueError(\"No list selected\")\n-\n-    def get_reminders(self, completed: Optional[bool] = None):\n-        if self.selected_list:\n-            return self.selected_list.get_reminders(completed)\n-        else:\n-            raise ValueError(\"No list selected\")\n-\n-    def clear_completed_reminders(self):\n-        if self.selected_list:\n-            completed_reminders = self.selected_list.get_reminders(completed=True)\n-            for reminder in completed_reminders:\n-                self.selected_list.remove_reminder(reminder)\n-        else:\n             raise ValueError(\"No list selected\")\n\\ No newline at end of file\n"
                }
            ],
            "date": 1724784607789,
            "name": "Commit-0",
            "content": "import EventKit\nfrom typing import List, Optional\nfrom .reminder_list import ReminderList\n\nclass ReminderApp:\n    def __init__(self):\n        self.event_store = EventKit.EKEventStore.new()\n        self.lists: List[ReminderList] = []\n        self.selected_list: Optional[ReminderList] = None\n        self._load_existing_lists()\n\n    def _load_existing_lists(self):\n        calendars = self.event_store.calendarsForEntityType_(EventKit.EKEntityTypeReminder)\n        for calendar in calendars:\n            self.lists.append(ReminderList(calendar.title, self.event_store))\n\n    def request_access(self):\n        \"\"\"Request access to reminders.\"\"\"\n        def callback(granted, error):\n            if not granted:\n                raise PermissionError(\"Access to reminders denied.\")\n        self.event_store.requestAccessToEntityType_completion_(EventKit.EKEntityTypeReminder, callback)\n\n    def add_list(self, reminder_list: ReminderList):\n        self.lists.append(reminder_list)\n\n    def remove_list(self, reminder_list: ReminderList):\n        if reminder_list.ek_calendar:\n            self.event_store.removeCalendar_commit_error_(reminder_list.ek_calendar, True, None)\n        self.lists.remove(reminder_list)\n\n    def select_list(self, list_name: str):\n        for lst in self.lists:\n            if lst.name == list_name:\n                self.selected_list = lst\n                return\n        raise ValueError(f\"List '{list_name}' not found\")\n\n    def add_reminder_to_selected(self, reminder):\n        if self.selected_list:\n            self.selected_list.add_reminder(reminder)\n        else:\n            raise ValueError(\"No list selected\")\n\n    def get_reminders(self, completed: Optional[bool] = None):\n        if self.selected_list:\n            return self.selected_list.get_reminders(completed)\n        else:\n            raise ValueError(\"No list selected\")\n\n    def clear_completed_reminders(self):\n        if self.selected_list:\n            completed_reminders = self.selected_list.get_reminders(completed=True)\n            for reminder in completed_reminders:\n                self.selected_list.remove_reminder(reminder)\n        else:\n            raise ValueError(\"No list selected\")"
        }
    ]
}