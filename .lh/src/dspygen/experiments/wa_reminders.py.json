{
    "sourceFile": "src/dspygen/experiments/wa_reminders.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1724537446206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724537498425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import csv\n+import subprocess\n+import typer\n+from typing import Optional\n+\n+app = typer.Typer()\n+\n+def run_applescript(script: str) -> None:\n+    process = subprocess.Popen(['osascript', '-e', script], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+    output, error = process.communicate()\n+    \n+    if error:\n+        typer.echo(f\"Error: {error.decode('utf-8')}\", err=True)\n+    else:\n+        typer.echo(\"Reminder added successfully.\")\n+\n+@app.command()\n+def import_reminders(\n+    csv_file: str = typer.Argument(..., help=\"Path to the CSV file containing reminders\"),\n+    list_name: Optional[str] = typer.Option(None, help=\"Name of the Reminders list to add to\")\n+):\n+    \"\"\"\n+    Import reminders from a CSV file into Apple's Reminders app.\n+    \"\"\"\n+    try:\n+        with open(csv_file, 'r') as file:\n+            reader = csv.DictReader(file)\n+            for row in reader:\n+                title = row.get('title', '').replace('\"', '\\\\\"')\n+                notes = row.get('notes', '').replace('\"', '\\\\\"')\n+                due_date = row.get('due_date', '')\n+                \n+                script = f'''\n+                tell application \"Reminders\"\n+                    set newReminder to make new reminder\n+                    set name of newReminder to \"{title}\"\n+                    set body of newReminder to \"{notes}\"\n+                '''\n+                \n+                if due_date:\n+                    script += f'set due date of newReminder to date \"{due_date}\"\\n'\n+                \n+                if list_name:\n+                    script += f'''\n+                    set targetList to list \"{list_name}\"\n+                    if targetList exists then\n+    if error:\n+        print(f\"Error: {error}\")\n+        return\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724537578172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,29 +28,38 @@\n             for row in reader:\n                 title = row.get('title', '').replace('\"', '\\\\\"')\n                 notes = row.get('notes', '').replace('\"', '\\\\\"')\n                 due_date = row.get('due_date', '')\n-                \n+\n                 script = f'''\n                 tell application \"Reminders\"\n                     set newReminder to make new reminder\n                     set name of newReminder to \"{title}\"\n                     set body of newReminder to \"{notes}\"\n                 '''\n-                \n+\n                 if due_date:\n                     script += f'set due date of newReminder to date \"{due_date}\"\\n'\n-                \n+\n                 if list_name:\n                     script += f'''\n                     set targetList to list \"{list_name}\"\n-                    if targetList exists then\n-    if error:\n-        print(f\"Error: {error}\")\n-        return\n-    # Run the AppleScript\n-    process = subprocess.Popen(['osascript', '-e', apple_script], stdout=subprocess.PIPE)\n-    output, error = process.communicate()\n+                    if exists targetList then\n\\ No newline at end of file\n+                        move newReminder to targetList\n+                    else\n+                        set newList to make new list with properties {{name:\"{list_name}\"}}\n+                        move newReminder to newList\n+                    end if\n+                    '''\n+                \n+                script += 'end tell'\n+                \n+                run_applescript(script)\n+        \n+        typer.echo(\"All reminders imported successfully.\")\n+    except FileNotFoundError:\n+        typer.echo(f\"Error: CSV file '{csv_file}' not found.\", err=True)\n+    except csv.Error as e:\n+        typer.echo(f\"Error reading CSV file: {e}\", err=True)\n \n-    if error:\n-        print(f\"Error: {error}\")\n-        return\n+if __name__ == \"__main__\":\n+    app()\n"
                },
                {
                    "date": 1724537661996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n import csv\n import subprocess\n import typer\n from typing import Optional\n+import pyperclip\n+import io\n \n app = typer.Typer()\n \n def run_applescript(script: str) -> None:\n@@ -13,8 +15,40 @@\n         typer.echo(f\"Error: {error.decode('utf-8')}\", err=True)\n     else:\n         typer.echo(\"Reminder added successfully.\")\n \n+def process_csv_data(csv_data: str, list_name: Optional[str]):\n+    reader = csv.DictReader(io.StringIO(csv_data))\n+    for row in reader:\n+        title = row.get('title', '').replace('\"', '\\\\\"')\n+        notes = row.get('notes', '').replace('\"', '\\\\\"')\n+        due_date = row.get('due_date', '')\n+\n+        script = f'''\n+        tell application \"Reminders\"\n+            set newReminder to make new reminder\n+            set name of newReminder to \"{title}\"\n+            set body of newReminder to \"{notes}\"\n+        '''\n+\n+        if due_date:\n+            script += f'set due date of newReminder to date \"{due_date}\"\\n'\n+\n+        if list_name:\n+            script += f'''\n+            set targetList to list \"{list_name}\"\n+            if exists targetList then\n+                move newReminder to targetList\n+            else\n+                set newList to make new list with properties {{name:\"{list_name}\"}}\n+                move newReminder to newList\n+            end if\n+            '''\n+        \n+        script += 'end tell'\n+        \n+        run_applescript(script)\n+\n @app.command()\n def import_reminders(\n     csv_file: str = typer.Argument(..., help=\"Path to the CSV file containing reminders\"),\n     list_name: Optional[str] = typer.Option(None, help=\"Name of the Reminders list to add to\")\n@@ -23,43 +57,28 @@\n     Import reminders from a CSV file into Apple's Reminders app.\n     \"\"\"\n     try:\n         with open(csv_file, 'r') as file:\n-            reader = csv.DictReader(file)\n-            for row in reader:\n-                title = row.get('title', '').replace('\"', '\\\\\"')\n-                notes = row.get('notes', '').replace('\"', '\\\\\"')\n-                due_date = row.get('due_date', '')\n-\n-                script = f'''\n-                tell application \"Reminders\"\n-                    set newReminder to make new reminder\n-                    set name of newReminder to \"{title}\"\n-                    set body of newReminder to \"{notes}\"\n-                '''\n-\n-                if due_date:\n-                    script += f'set due date of newReminder to date \"{due_date}\"\\n'\n-\n-                if list_name:\n-                    script += f'''\n-                    set targetList to list \"{list_name}\"\n-                    if exists targetList then\n-                        move newReminder to targetList\n-                    else\n-                        set newList to make new list with properties {{name:\"{list_name}\"}}\n-                        move newReminder to newList\n-                    end if\n-                    '''\n-                \n-                script += 'end tell'\n-                \n-                run_applescript(script)\n-        \n+            csv_data = file.read()\n+        process_csv_data(csv_data, list_name)\n         typer.echo(\"All reminders imported successfully.\")\n     except FileNotFoundError:\n         typer.echo(f\"Error: CSV file '{csv_file}' not found.\", err=True)\n     except csv.Error as e:\n         typer.echo(f\"Error reading CSV file: {e}\", err=True)\n \n+@app.command()\n+def import_from_clipboard(\n+    list_name: Optional[str] = typer.Option(None, help=\"Name of the Reminders list to add to\")\n+):\n+    \"\"\"\n+    Import reminders from CSV data in the clipboard into Apple's Reminders app.\n+    \"\"\"\n+    try:\n+        csv_data = pyperclip.paste()\n+        process_csv_data(csv_data, list_name)\n+        typer.echo(\"All reminders imported successfully from clipboard.\")\n+    except csv.Error as e:\n+        typer.echo(f\"Error reading CSV data from clipboard: {e}\", err=True)\n+\n if __name__ == \"__main__\":\n     app()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724537722318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,84 @@\n+import csv\n+import subprocess\n+import typer\n+from typing import Optional\n+import pyperclip\n+import io\n+\n+app = typer.Typer()\n+\n+def run_applescript(script: str) -> None:\n+    process = subprocess.Popen(['osascript', '-e', script], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+    output, error = process.communicate()\n+    \n+    if error:\n+        typer.echo(f\"Error: {error.decode('utf-8')}\", err=True)\n+    else:\n+        typer.echo(\"Reminder added successfully.\")\n+\n+def process_csv_data(csv_data: str, list_name: Optional[str]):\n+    reader = csv.DictReader(io.StringIO(csv_data))\n+    for row in reader:\n+        title = row.get('title', '').replace('\"', '\\\\\"')\n+        notes = row.get('notes', '').replace('\"', '\\\\\"')\n+        due_date = row.get('due_date', '')\n+\n+        script = f'''\n+        tell application \"Reminders\"\n+            set newReminder to make new reminder\n+            set name of newReminder to \"{title}\"\n+            set body of newReminder to \"{notes}\"\n+        '''\n+\n+        if due_date:\n+            script += f'set due date of newReminder to date \"{due_date}\"\\n'\n+\n+        if list_name:\n+            script += f'''\n+            set targetList to list \"{list_name}\"\n+            if exists targetList then\n+                move newReminder to targetList\n+            else\n+                set newList to make new list with properties {{name:\"{list_name}\"}}\n+                move newReminder to newList\n+            end if\n+            '''\n+        \n+        script += 'end tell'\n+        \n+        run_applescript(script)\n+\n+@app.command()\n+def import_reminders(\n+    csv_file: str = typer.Argument(..., help=\"Path to the CSV file containing reminders\"),\n+    list_name: Optional[str] = typer.Option(None, help=\"Name of the Reminders list to add to\")\n+):\n+    \"\"\"\n+    Import reminders from a CSV file into Apple's Reminders app.\n+    \"\"\"\n+    try:\n+        with open(csv_file, 'r') as file:\n+            csv_data = file.read()\n+        process_csv_data(csv_data, list_name)\n+        typer.echo(\"All reminders imported successfully.\")\n+    except FileNotFoundError:\n+        typer.echo(f\"Error: CSV file '{csv_file}' not found.\", err=True)\n+    except csv.Error as e:\n+        typer.echo(f\"Error reading CSV file: {e}\", err=True)\n+\n+@app.command()\n+def import_from_clipboard(\n+    list_name: Optional[str] = typer.Option(None, help=\"Name of the Reminders list to add to\")\n+):\n+    \"\"\"\n+    Import reminders from CSV data in the clipboard into Apple's Reminders app.\n+    \"\"\"\n+    try:\n+        csv_data = pyperclip.paste()\n+        process_csv_data(csv_data, list_name)\n+        typer.echo(\"All reminders imported successfully from clipboard.\")\n+    except csv.Error as e:\n+        typer.echo(f\"Error reading CSV data from clipboard: {e}\", err=True)\n+\n+if __name__ == \"__main__\":\n+    app()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724537766313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,65 @@\n+import csv\n+import subprocess\n+import typer\n+from typing import Optional\n+\n+app = typer.Typer()\n+\n+def run_applescript(script: str) -> None:\n+    process = subprocess.Popen(['osascript', '-e', script], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+    output, error = process.communicate()\n+    \n+    if error:\n+        typer.echo(f\"Error: {error.decode('utf-8')}\", err=True)\n+    else:\n+        typer.echo(\"Reminder added successfully.\")\n+\n+@app.command()\n+def import_reminders(\n+    csv_file: str = typer.Argument(..., help=\"Path to the CSV file containing reminders\"),\n+    list_name: Optional[str] = typer.Option(None, help=\"Name of the Reminders list to add to\")\n+):\n+    \"\"\"\n+    Import reminders from a CSV file into Apple's Reminders app.\n+    \"\"\"\n+    try:\n+        with open(csv_file, 'r') as file:\n+            reader = csv.DictReader(file)\n+            for row in reader:\n+                title = row.get('title', '').replace('\"', '\\\\\"')\n+                notes = row.get('notes', '').replace('\"', '\\\\\"')\n+                due_date = row.get('due_date', '')\n+\n+                script = f'''\n+                tell application \"Reminders\"\n+                    set newReminder to make new reminder\n+                    set name of newReminder to \"{title}\"\n+                    set body of newReminder to \"{notes}\"\n+                '''\n+\n+                if due_date:\n+                    script += f'set due date of newReminder to date \"{due_date}\"\\n'\n+\n+                if list_name:\n+                    script += f'''\n+                    set targetList to list \"{list_name}\"\n+                    if exists targetList then\n+                        move newReminder to targetList\n+                    else\n+                        set newList to make new list with properties {{name:\"{list_name}\"}}\n+                        move newReminder to newList\n+                    end if\n+                    '''\n+                \n+                script += 'end tell'\n+                \n+                run_applescript(script)\n+        \n+        typer.echo(\"All reminders imported successfully.\")\n+    except FileNotFoundError:\n+        typer.echo(f\"Error: CSV file '{csv_file}' not found.\", err=True)\n+    except csv.Error as e:\n+        typer.echo(f\"Error reading CSV file: {e}\", err=True)\n+\n+if __name__ == \"__main__\":\n+    app()\n"
                },
                {
                    "date": 1724537848708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,11 @@\n import csv\n import subprocess\n import typer\n-from typing import Optional, List\n-import pyperclip\n-import io\n-from pydantic import BaseModel, Field, ValidationError\n-from datetime import datetime, date\n+from typing import Optional\n \n app = typer.Typer()\n \n-class Reminder(BaseModel):\n-    title: str = Field(..., min_length=1, max_length=255)\n-    notes: Optional[str] = Field(None, max_length=1000)\n-    due_date: Optional[date] = None\n-\n-    @classmethod\n-    def from_row(cls, row: dict) -> 'Reminder':\n-        due_date = None\n-        if row.get('due_date'):\n-            try:\n-                due_date = datetime.strptime(row['due_date'], \"%Y-%m-%d\").date()\n-            except ValueError:\n-                raise ValueError(f\"Invalid date format for due_date: {row['due_date']}. Expected format: YYYY-MM-DD\")\n-        \n-        return cls(\n-            title=row['title'],\n-            notes=row.get('notes'),\n-            due_date=due_date\n-        )\n-\n def run_applescript(script: str) -> None:\n     process = subprocess.Popen(['osascript', '-e', script], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n     output, error = process.communicate()\n     \n@@ -37,49 +13,8 @@\n         typer.echo(f\"Error: {error.decode('utf-8')}\", err=True)\n     else:\n         typer.echo(\"Reminder added successfully.\")\n \n-def process_csv_data(csv_data: str, list_name: Optional[str]):\n-    reader = csv.DictReader(io.StringIO(csv_data))\n-    reminders: List[Reminder] = []\n-    \n-    for row in reader:\n-        try:\n-            reminder = Reminder.from_row(row)\n-            reminders.append(reminder)\n-        except ValidationError as e:\n-            typer.echo(f\"Error validating row: {e}\", err=True)\n-        except ValueError as e:\n-            typer.echo(str(e), err=True)\n-\n-    for reminder in reminders:\n-        script = f'''\n-        tell application \"Reminders\"\n-            set newReminder to make new reminder\n-            set name of newReminder to \"{reminder.title.replace('\"', '\\\\\"')}\"\n-        '''\n-\n-        if reminder.notes:\n-            script += f'set body of newReminder to \"{reminder.notes.replace('\"', '\\\\\"')}\"\\n'\n-\n-        if reminder.due_date:\n-            script += f'set due date of newReminder to date \"{reminder.due_date.isoformat()}\"\\n'\n-\n-        if list_name:\n-            script += f'''\n-            set targetList to list \"{list_name}\"\n-            if exists targetList then\n-                move newReminder to targetList\n-            else\n-                set newList to make new list with properties {{name:\"{list_name}\"}}\n-                move newReminder to newList\n-            end if\n-            '''\n-        \n-        script += 'end tell'\n-        \n-        run_applescript(script)\n-\n @app.command()\n def import_reminders(\n     csv_file: str = typer.Argument(..., help=\"Path to the CSV file containing reminders\"),\n     list_name: Optional[str] = typer.Option(None, help=\"Name of the Reminders list to add to\")\n@@ -88,28 +23,43 @@\n     Import reminders from a CSV file into Apple's Reminders app.\n     \"\"\"\n     try:\n         with open(csv_file, 'r') as file:\n-            csv_data = file.read()\n-        process_csv_data(csv_data, list_name)\n+            reader = csv.DictReader(file)\n+            for row in reader:\n+                title = row.get('title', '').replace('\"', '\\\\\"')\n+                notes = row.get('notes', '').replace('\"', '\\\\\"')\n+                due_date = row.get('due_date', '')\n+\n+                script = f'''\n+                tell application \"Reminders\"\n+                    set newReminder to make new reminder\n+                    set name of newReminder to \"{title}\"\n+                    set body of newReminder to \"{notes}\"\n+                '''\n+\n+                if due_date:\n+                    script += f'set due date of newReminder to date \"{due_date}\"\\n'\n+\n+                if list_name:\n+                    script += f'''\n+                    set targetList to list \"{list_name}\"\n+                    if exists targetList then\n+                        move newReminder to targetList\n+                    else\n\\ No newline at end of file\n+                        set newList to make new list with properties {{name:\"{list_name}\"}}\n+                        move newReminder to newList\n+                    end if\n+                    '''\n+                \n+                script += 'end tell'\n+                \n+                run_applescript(script)\n+        \n         typer.echo(\"All reminders imported successfully.\")\n     except FileNotFoundError:\n         typer.echo(f\"Error: CSV file '{csv_file}' not found.\", err=True)\n     except csv.Error as e:\n         typer.echo(f\"Error reading CSV file: {e}\", err=True)\n \n-@app.command()\n-def import_from_clipboard(\n-    list_name: Optional[str] = typer.Option(None, help=\"Name of the Reminders list to add to\")\n-):\n-    \"\"\"\n-    Import reminders from CSV data in the clipboard into Apple's Reminders app.\n-    \"\"\"\n-    try:\n-        csv_data = pyperclip.paste()\n-        process_csv_data(csv_data, list_name)\n-        typer.echo(\"All reminders imported successfully from clipboard.\")\n-    except csv.Error as e:\n-        typer.echo(f\"Error reading CSV data from clipboard: {e}\", err=True)\n-\n if __name__ == \"__main__\":\n-    app()\n+    app()\n"
                },
                {
                    "date": 1724538118626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,161 @@\n+import csv\n+import subprocess\n+import typer\n+from typing import Optional, List\n+import pyperclip\n+import io\n+from pydantic import BaseModel, Field, ValidationError\n+from datetime import datetime, date\n+\n+app = typer.Typer()\n+\n+class Reminder(BaseModel):\n+    title: str = Field(..., min_length=1, max_length=255)\n+    notes: Optional[str] = Field(None, max_length=1000)\n+    due_date: Optional[date] = None\n+\n+    @classmethod\n+    def from_row(cls, row: dict) -> 'Reminder':\n+        due_date = None\n+        if row.get('due_date'):\n+            try:\n+                due_date = datetime.strptime(row['due_date'], \"%Y-%m-%d\").date()\n+            except ValueError:\n+                raise ValueError(f\"Invalid date format for due_date: {row['due_date']}. Expected format: YYYY-MM-DD\")\n+        \n+        return cls(\n+            title=row['title'],\n+            notes=row.get('notes'),\n+            due_date=due_date\n+        )\n+\n+def run_applescript(script: str) -> None:\n+    process = subprocess.Popen(['osascript', '-e', script], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+    output, error = process.communicate()\n+    \n+    if error:\n+        typer.echo(f\"Error: {error.decode('utf-8')}\", err=True)\n+    else:\n+        typer.echo(\"Reminder added successfully.\")\n+\n+def process_csv_data(csv_data: str, list_name: Optional[str]):\n+    reader = csv.DictReader(io.StringIO(csv_data))\n+    reminders: List[Reminder] = []\n+    \n+    for row in reader:\n+        try:\n+            reminder = Reminder.from_row(row)\n+            reminders.append(reminder)\n+        except ValidationError as e:\n+            typer.echo(f\"Error validating row: {e}\", err=True)\n+        except ValueError as e:\n+            typer.echo(str(e), err=True)\n+\n+    for reminder in reminders:\n+        script = f'''\n+        tell application \"Reminders\"\n+            set newReminder to make new reminder\n+            set name of newReminder to \"{reminder.title.replace('\"', '\\\\\"')}\"\n+        '''\n+\n+        if reminder.notes:\n+            script += f'set body of newReminder to \"{reminder.notes.replace('\"', '\\\\\"')}\"\\n'\n+\n+        if reminder.due_date:\n+            script += f'set due date of newReminder to date \"{reminder.due_date.isoformat()}\"\\n'\n+\n+        if list_name:\n+            script += f'''\n+            set targetList to list \"{list_name}\"\n+            if exists targetList then\n+                move newReminder to targetList\n+            else\n+                set newList to make new list with properties {{name:\"{list_name}\"}}\n+                move newReminder to newList\n+            end if\n+            '''\n+        \n+        script += 'end tell'\n+        \n+        run_applescript(script)\n+\n+@app.command()\n+def import_reminders(\n+    csv_file: str = typer.Argument(..., help=\"Path to the CSV file containing reminders\"),\n+    list_name: Optional[str] = typer.Option(None, help=\"Name of the Reminders list to add to\")\n+):\n+    \"\"\"\n+    Import reminders from a CSV file into Apple's Reminders app.\n+    \"\"\"\n+    try:\n+        with open(csv_file, 'r') as file:\n+            csv_data = file.read()\n+        process_csv_data(csv_data, list_name)\n+        typer.echo(\"All reminders imported successfully.\")\n+    except FileNotFoundError:\n+        typer.echo(f\"Error: CSV file '{csv_file}' not found.\", err=True)\n+    except csv.Error as e:\n+        typer.echo(f\"Error reading CSV file: {e}\", err=True)\n+\n+@app.command()\n+def import_from_clipboard(\n+    list_name: Optional[str] = typer.Option(None, help=\"Name of the Reminders list to add to\")\n+):\n+    \"\"\"\n+    Import reminders from CSV data in the clipboard into Apple's Reminders app.\n+    \"\"\"\n+    try:\n+        csv_data = pyperclip.paste()\n+        reader = csv.DictReader(io.StringIO(csv_data))\n+        reminders: List[Reminder] = []\n+        \n+        for row in reader:\n+            try:\n+                reminder = Reminder.from_row(row)\n+                reminders.append(reminder)\n+            except ValidationError as e:\n+                typer.echo(f\"Error validating row: {e}\", err=True)\n+                raise typer.Exit(code=1)\n+            except ValueError as e:\n+                typer.echo(f\"Error validating row: {e}\", err=True)\n+                raise typer.Exit(code=1)\n+        \n+        if not reminders:\n+            typer.echo(\"No valid reminders found in clipboard data.\", err=True)\n+            raise typer.Exit(code=1)\n+        \n+        for reminder in reminders:\n+            script = f'''\n+            tell application \"Reminders\"\n+                set newReminder to make new reminder\n+                set name of newReminder to \"{reminder.title.replace('\"', '\\\\\"')}\"\n+            '''\n+\n+            if reminder.notes:\n+                script += f'set body of newReminder to \"{reminder.notes.replace('\"', '\\\\\"')}\"\\n'\n+\n+            if reminder.due_date:\n+                script += f'set due date of newReminder to date \"{reminder.due_date.isoformat()}\"\\n'\n+\n+            if list_name:\n+                script += f'''\n+                set targetList to list \"{list_name}\"\n+                if exists targetList then\n+                    move newReminder to targetList\n+                else\n+                    set newList to make new list with properties {{name:\"{list_name}\"}}\n+                    move newReminder to newList\n+                end if\n+                '''\n+            \n+            script += 'end tell'\n+            \n+            run_applescript(script)\n+        \n+        typer.echo(\"All reminders imported successfully from clipboard.\")\n+    except csv.Error as e:\n+        typer.echo(f\"Error reading CSV data from clipboard: {e}\", err=True)\n+        raise typer.Exit(code=1)\n+\n+if __name__ == \"__main__\":\n+    app()\n\\ No newline at end of file\n"
                }
            ],
            "date": 1724537446206,
            "name": "Commit-0",
            "content": "    # Run the AppleScript\n    process = subprocess.Popen(['osascript', '-e', apple_script], stdout=subprocess.PIPE)\n    output, error = process.communicate()\n\n    if error:\n        print(f\"Error: {error}\")\n        return"
        }
    ]
}