{
    "sourceFile": "src/dspygen/experiments/event_kit/event_kit_store_service.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1724705916782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1724705916782,
            "name": "Commit-0",
            "content": "import EventKit\nfrom typing import List, Optional, Callable\nfrom uuid import UUID\n\nclass EventKitStoreService:\n    def __init__(self):\n        self.store = EventKit.EKEventStore.new()\n        self.request_access()\n\n    def request_access(self):\n        def handler(granted: bool, error: Optional[str]):\n            if not granted:\n                raise PermissionError(\"Access to reminders was not granted\")\n\n        self.store.requestAccessToEntityType(EventKit.EKEntityTypeReminder, completionHandler=handler)\n\n    def get_calendars(self, entity_type: int) -> List[dict]:\n        calendars = self.store.calendarsForEntityType_(entity_type)\n        return [\n            {\n                'id': UUID(calendar.calendarIdentifier()),\n                'title': calendar.title()\n            } for calendar in calendars\n        ]\n\n    def get_reminders(self, calendar_id: UUID) -> List[dict]:\n        calendar = next(c for c in self.store.calendarsForEntityType_(EventKit.EKEntityTypeReminder) \n                        if UUID(c.calendarIdentifier()) == calendar_id)\n        predicate = self.store.predicateForRemindersInCalendars_([calendar])\n        reminders = self.store.remindersMatchingPredicate_(predicate)\n\n        return [\n            {\n                'id': UUID(reminder.calendarItemIdentifier()),\n                'title': reminder.title(),\n                'due_date': reminder.dueDateComponents().date() if reminder.dueDateComponents() else None,\n                'completed': reminder.isCompleted(),\n                'notes': reminder.notes(),\n                'calendar_id': calendar_id,\n            } for reminder in reminders\n        ]\n\n    def add_reminder(self, calendar_id: UUID, reminder_data: dict) -> dict:\n        calendar = next(c for c in self.store.calendarsForEntityType_(EventKit.EKEntityTypeReminder) \n                        if UUID(c.calendarIdentifier()) == calendar_id)\n        reminder = EventKit.EKReminder.reminderWithEventStore_(self.store)\n        reminder.title = reminder_data['title']\n        reminder.calendar = calendar\n\n        if reminder_data.get('due_date'):\n            reminder_due_date = EventKit.EKAlarm.alarmWithAbsoluteDate_(reminder_data['due_date'])\n            reminder.addAlarm_(reminder_due_date)\n\n        reminder.notes = reminder_data.get('notes')\n        reminder.setCompleted_(reminder_data.get('completed', False))\n        self.store.saveReminder_commit_error_(reminder, True, None)\n\n        return {\n            'id': UUID(reminder.calendarItemIdentifier()),\n            'title': reminder.title(),\n            'due_date': reminder.dueDateComponents().date() if reminder.dueDateComponents() else None,\n            'completed': reminder.isCompleted(),\n            'notes': reminder.notes(),\n            'calendar_id': calendar_id,\n        }\n\n    def update_reminder(self, calendar_id: UUID, reminder_id: UUID, reminder_data: dict) -> dict:\n        reminders = self.get_reminders(calendar_id)\n        reminder = next(r for r in reminders if r['id'] == reminder_id)\n\n        updated_reminder = {**reminder, **reminder_data}\n        return self.add_reminder(calendar_id, updated_reminder)\n\n    def delete_reminder(self, calendar_id: UUID, reminder_id: UUID):\n        reminders = self.get_reminders(calendar_id)\n        reminder = next(r for r in reminders if r['id'] == reminder_id)\n\n        reminder_to_delete = self.store.calendarItemWithIdentifier_(str(reminder['id']))\n        self.store.removeReminder_commit_error_(reminder_to_delete, True, None)\n\n    def fetch_changes(self, token: str, result_handler: Callable):\n        self.store.fetchChangedObjectIDsSinceToken_resultHandler_(token, result_handler)\n\n    def commit(self):\n        self.store.commit_()\n\n    def rollback(self):\n        self.store.rollback()\n\n    def reset(self):\n        self.store.reset()\n\n    def get_default_calendar_for_new_reminders(self) -> dict:\n        calendar = self.store.defaultCalendarForNewReminders()\n        return {\n            'id': UUID(calendar.calendarIdentifier()),\n            'title': calendar.title()\n        }\n\n    def set_default_calendar_for_new_reminders(self, calendar_id: UUID):\n        calendars = self.store.calendarsForEntityType_(EventKit.EKEntityTypeReminder)\n        calendar = next(c for c in calendars if UUID(c.calendarIdentifier()) == calendar_id)\n        self.store.setDefaultCalendarForNewReminders_(calendar)"
        }
    ]
}