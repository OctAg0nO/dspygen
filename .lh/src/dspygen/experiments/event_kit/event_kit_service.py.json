{
    "sourceFile": "src/dspygen/experiments/event_kit/event_kit_service.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1724705640865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724705783417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,5 +95,43 @@\n         reminders = self.get_reminders(calendar_id)\n         reminder = next(r for r in reminders if r.id == reminder_id)\n \n         reminder_to_delete = self.store.calendarItemWithIdentifier_(str(reminder.id))\n-        self.store.removeReminder_commit_error_(reminder_to_delete, True, None)\n\\ No newline at end of file\n+        self.store.removeReminder_commit_error_(reminder_to_delete, True, None)\n+\n+def print_ekeventstore_info():\n+    print(\"EKEventStore Methods and Properties:\")\n+    print(\"====================================\")\n+    \n+    # Get all attributes of EKEventStore\n+    attributes = dir(EventKit.EKEventStore)\n+    \n+    # Separate methods and properties\n+    methods = []\n+    properties = []\n+    \n+    for attr in attributes:\n+        # Skip private attributes (those starting with underscore)\n+        if attr.startswith('_'):\n+            continue\n+        \n+        # Get the attribute\n+        attr_value = getattr(EventKit.EKEventStore, attr)\n+        \n+        # Check if it's a method or a property\n+        if callable(attr_value):\n+            methods.append(attr)\n+        else:\n+            properties.append(attr)\n+    \n+    # Print methods\n+    print(\"\\nMethods:\")\n+    for method in sorted(methods):\n+        print(f\"- {method}\")\n+    \n+    # Print properties\n+    print(\"\\nProperties:\")\n+    for prop in sorted(properties):\n+        print(f\"- {prop}\")\n+\n+# You can call this function to print the info\n+print_ekeventstore_info()\n\\ No newline at end of file\n"
                }
            ],
            "date": 1724705640865,
            "name": "Commit-0",
            "content": "import EventKit\nfrom datetime import datetime\nfrom typing import Optional, List\nfrom uuid import UUID, uuid4\nfrom pydantic import BaseModel, Field\n\nstore = EventKit.EKEventStore.new()\n\n\nclass Reminder(BaseModel):\n    id: UUID = Field(default_factory=uuid4)\n    title: str\n    due_date: Optional[datetime] = None\n    completed: bool = False\n    notes: Optional[str] = None\n    calendar_id: UUID\n\n\nclass Calendar(BaseModel):\n    id: UUID = Field(default_factory=uuid4)\n    title: str\n    reminders: List[Reminder] = Field(default_factory=list)\n\n\nclass EventKitService:\n    def __init__(self):\n        self.store = store\n        self.request_access()\n\n    def request_access(self):\n        def handler(granted, error):\n            if not granted:\n                raise PermissionError(\"Access to reminders was not granted\")\n\n        # Update this line to use the correct method\n        self.store.requestAccessToEntityType(EventKit.EKEntityTypeReminder, completionHandler=handler)\n\n    def get_calendars(self) -> List[Calendar]:\n        calendars = self.store.calendarsForEntityType_(EventKit.EKEntityTypeReminder)\n        return [Calendar(id=UUID(calendar.calendarIdentifier()), title=calendar.title()) for calendar in calendars]\n\n    def get_reminders(self, calendar_id: UUID) -> List[Reminder]:\n        calendar = next(c for c in self.store.calendarsForEntityType_(EventKit.EKEntityTypeReminder) if UUID(c.calendarIdentifier()) == calendar_id)\n        predicate = self.store.predicateForRemindersInCalendars_([calendar])\n        reminders = self.store.remindersMatchingPredicate_(predicate)\n\n        return [\n            Reminder(\n                id=UUID(reminder.calendarItemIdentifier()),\n                title=reminder.title(),\n                due_date=reminder.dueDateComponents().date() if reminder.dueDateComponents() else None,\n                completed=reminder.isCompleted(),\n                notes=reminder.notes(),\n                calendar_id=calendar_id,\n            ) for reminder in reminders\n        ]\n\n    def add_reminder(self, calendar_id: UUID, reminder_data: Reminder) -> Reminder:\n        calendar = next(c for c in self.store.calendarsForEntityType_(EventKit.EKEntityTypeReminder) if UUID(c.calendarIdentifier()) == calendar_id)\n        reminder = EventKit.EKReminder.reminderWithEventStore_(self.store)\n        reminder.title = reminder_data.title\n        reminder.calendar = calendar\n\n        if reminder_data.due_date:\n            reminder_due_date = EventKit.EKAlarm.alarmWithAbsoluteDate_(reminder_data.due_date)\n            reminder.addAlarm_(reminder_due_date)\n\n        reminder.notes = reminder_data.notes\n        reminder.setCompleted_(reminder_data.completed)\n        self.store.saveReminder_commit_error_(reminder, True, None)\n\n        return Reminder(\n            id=UUID(reminder.calendarItemIdentifier()),\n            title=reminder.title(),\n            due_date=reminder.dueDateComponents().date() if reminder.dueDateComponents() else None,\n            completed=reminder.isCompleted(),\n            notes=reminder.notes(),\n            calendar_id=calendar_id,\n        )\n\n    def update_reminder(self, calendar_id: UUID, reminder_id: UUID, reminder_data: Reminder) -> Reminder:\n        reminders = self.get_reminders(calendar_id)\n        reminder = next(r for r in reminders if r.id == reminder_id)\n\n        reminder.title = reminder_data.title\n        reminder.due_date = reminder_data.due_date\n        reminder.completed = reminder_data.completed\n        reminder.notes = reminder_data.notes\n\n        self.add_reminder(calendar_id, reminder)\n\n        return reminder\n\n    def delete_reminder(self, calendar_id: UUID, reminder_id: UUID):\n        reminders = self.get_reminders(calendar_id)\n        reminder = next(r for r in reminders if r.id == reminder_id)\n\n        reminder_to_delete = self.store.calendarItemWithIdentifier_(str(reminder.id))\n        self.store.removeReminder_commit_error_(reminder_to_delete, True, None)"
        }
    ]
}